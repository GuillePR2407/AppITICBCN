{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { UserProvider } from \"./context/UserContext\";\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, DarkTheme as NavigationDarkTheme, DefaultTheme as NavigationDefaultTheme } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { useKeepAwake } from 'expo-keep-awake';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport DrawerItems from \"./items/DrawerItems\";\nimport App from \"./RootNavigator\";\nimport { TemaClaro, TemaOscuro } from \"../assets/styles/CustomTheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar customFonts = {\n  'Outfit': require(\"../assets/fonts/Outfit-VariableFont_wght.ttf\")\n};\nvar fontConfig = {\n  ios: customFonts,\n  android: customFonts,\n  web: customFonts\n};\nvar PERSISTENCE_KEY = 'NAVIGATION_STATE';\nvar PREFERENCES_KEY = 'APP_PREFERENCES';\nvar CombinedDarkTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDarkTheme), TemaOscuro), {}, {\n  colors: _objectSpread(_objectSpread({}, NavigationDarkTheme.colors), TemaOscuro.colors)\n});\nvar CombinedDefaultTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDefaultTheme), TemaClaro), {}, {\n  colors: _objectSpread(_objectSpread({}, NavigationDefaultTheme.colors), TemaClaro.colors)\n});\nexport var PreferencesContext = React.createContext(null);\nvar Drawer = createDrawerNavigator();\nexport default function PaperExample() {\n  useKeepAwake();\n  var _useFonts = useFonts(customFonts),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isReady = _React$useState2[0],\n    setIsReady = _React$useState2[1];\n  var _React$useState3 = React.useState(),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    initialState = _React$useState4[0],\n    setInitialState = _React$useState4[1];\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    isDarkMode = _React$useState6[0],\n    setIsDarkMode = _React$useState6[1];\n  var _React$useState7 = React.useState(3),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    themeVersion = _React$useState8[0],\n    setThemeVersion = _React$useState8[1];\n  var _React$useState9 = React.useState(false),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    collapsed = _React$useState10[0],\n    setCollapsed = _React$useState10[1];\n  var _React$useState11 = React.useState(false),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    customFontLoaded = _React$useState12[0],\n    setCustomFont = _React$useState12[1];\n  var _React$useState13 = React.useState(true),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    rippleEffectEnabled = _React$useState14[0],\n    setRippleEffectEnabled = _React$useState14[1];\n  var theme = isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n  var toggleThemeVersion = function toggleThemeVersion() {\n    return setThemeVersion(function (prevVersion) {\n      return prevVersion === 2 ? 3 : 2;\n    });\n  };\n  React.useEffect(function () {\n    var restoreState = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var savedStateString = yield AsyncStorage.getItem(PERSISTENCE_KEY);\n          var state = savedStateString ? JSON.parse(savedStateString) : undefined;\n          setInitialState(state);\n        } catch (e) {} finally {\n          setIsReady(true);\n        }\n      });\n      return function restoreState() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n  React.useEffect(function () {\n    var restorePrefs = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var prefString = yield AsyncStorage.getItem(PREFERENCES_KEY);\n          var _preferences = JSON.parse(prefString || '');\n          setIsDarkMode(_preferences.theme === 'dark');\n          setThemeVersion(_preferences.themeVersion || 3);\n        } catch (e) {}\n      });\n      return function restorePrefs() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    restorePrefs();\n  }, []);\n  React.useEffect(function () {\n    var savePrefs = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.setItem(PREFERENCES_KEY, JSON.stringify({\n            theme: isDarkMode ? 'dark' : 'light',\n            themeVersion: themeVersion\n          }));\n        } catch (e) {}\n      });\n      return function savePrefs() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    savePrefs();\n  }, [isDarkMode, themeVersion]);\n  var preferences = React.useMemo(function () {\n    return {\n      toggleTheme: function toggleTheme() {\n        return setIsDarkMode(!isDarkMode);\n      },\n      toggleThemeVersion: toggleThemeVersion,\n      toggleCollapsed: function toggleCollapsed() {\n        return setCollapsed(!collapsed);\n      },\n      toggleCustomFont: function toggleCustomFont() {\n        return setCustomFont(!customFontLoaded);\n      },\n      toggleRippleEffect: function toggleRippleEffect() {\n        return setRippleEffectEnabled(!rippleEffectEnabled);\n      },\n      customFontLoaded: customFontLoaded,\n      rippleEffectEnabled: rippleEffectEnabled,\n      collapsed: collapsed,\n      theme: theme\n    };\n  }, [isDarkMode, themeVersion, collapsed, customFontLoaded, rippleEffectEnabled, theme]);\n  if (!isReady || !fontsLoaded) {\n    return null;\n  }\n  return _jsx(UserProvider, {\n    children: _jsx(PaperProvider, {\n      theme: theme,\n      children: _jsx(PreferencesContext.Provider, {\n        value: preferences,\n        children: _jsx(NavigationContainer, {\n          theme: theme,\n          initialState: initialState,\n          children: _jsx(SafeAreaInsetsContext.Consumer, {\n            children: function children(insets) {\n              var _ref4 = insets || {},\n                _ref4$left = _ref4.left,\n                left = _ref4$left === void 0 ? 0 : _ref4$left,\n                _ref4$right = _ref4.right,\n                right = _ref4$right === void 0 ? 0 : _ref4$right;\n              var collapsedDrawerWidth = 80 + Math.max(left, right);\n              return _jsx(Drawer.Navigator, {\n                screenOptions: {\n                  drawerStyle: {\n                    width: collapsed ? collapsedDrawerWidth : undefined\n                  }\n                },\n                drawerContent: DrawerItems,\n                children: _jsx(Drawer.Screen, {\n                  name: \"Home\",\n                  component: App,\n                  options: {\n                    headerShown: false\n                  }\n                })\n              });\n            }\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","AsyncStorage","UserProvider","createDrawerNavigator","NavigationContainer","DarkTheme","NavigationDarkTheme","DefaultTheme","NavigationDefaultTheme","useFonts","useKeepAwake","Provider","PaperProvider","SafeAreaInsetsContext","DrawerItems","App","TemaClaro","TemaOscuro","jsx","_jsx","customFonts","require","fontConfig","ios","android","web","PERSISTENCE_KEY","PREFERENCES_KEY","CombinedDarkTheme","_objectSpread","colors","CombinedDefaultTheme","PreferencesContext","createContext","Drawer","PaperExample","_useFonts","_useFonts2","_slicedToArray","fontsLoaded","_React$useState","useState","_React$useState2","isReady","setIsReady","_React$useState3","_React$useState4","initialState","setInitialState","_React$useState5","_React$useState6","isDarkMode","setIsDarkMode","_React$useState7","_React$useState8","themeVersion","setThemeVersion","_React$useState9","_React$useState10","collapsed","setCollapsed","_React$useState11","_React$useState12","customFontLoaded","setCustomFont","_React$useState13","_React$useState14","rippleEffectEnabled","setRippleEffectEnabled","theme","toggleThemeVersion","prevVersion","useEffect","restoreState","_ref","_asyncToGenerator","savedStateString","getItem","state","JSON","parse","undefined","e","apply","arguments","restorePrefs","_ref2","prefString","preferences","savePrefs","_ref3","setItem","stringify","useMemo","toggleTheme","toggleCollapsed","toggleCustomFont","toggleRippleEffect","children","value","Consumer","insets","_ref4","_ref4$left","left","_ref4$right","right","collapsedDrawerWidth","Math","max","Navigator","screenOptions","drawerStyle","width","drawerContent","Screen","name","component","options","headerShown"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { UserProvider } from './context/UserContext';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport {\r\n  InitialState,\r\n  NavigationContainer,\r\n  DarkTheme as NavigationDarkTheme,\r\n  DefaultTheme as NavigationDefaultTheme,\r\n} from '@react-navigation/native';\r\nimport { useFonts } from 'expo-font';\r\nimport { useKeepAwake } from 'expo-keep-awake';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\nimport { configureFonts } from 'react-native-paper';\r\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\r\nimport DrawerItems from './items/DrawerItems';\r\nimport App from './RootNavigator';\r\nimport { TemaClaro, TemaOscuro } from '../assets/styles/CustomTheme';\r\n\r\ninterface Fonts {\r\n  [key: string]: any;\r\n}\r\n\r\nconst customFonts: Fonts = {\r\n  'Outfit': require('../assets/fonts/Outfit-VariableFont_wght.ttf'),\r\n};\r\n\r\ninterface FontConfig {\r\n  regular: {\r\n    fontFamily: string;\r\n    fontWeight: string;\r\n  };\r\n  medium: {\r\n    fontFamily: string;\r\n    fontWeight: string;\r\n  };\r\n  light: {\r\n    fontFamily: string;\r\n    fontWeight: string;\r\n  };\r\n  thin: {\r\n    fontFamily: string;\r\n    fontWeight: string;\r\n  };\r\n}\r\n\r\nconst fontConfig = {\r\n  ios: customFonts,\r\n  android: customFonts,\r\n  web: customFonts,\r\n};\r\n\r\ninterface AppPreferences {\r\n  theme: string;\r\n  themeVersion?: number;\r\n}\r\n\r\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE';\r\nconst PREFERENCES_KEY = 'APP_PREFERENCES';\r\n\r\nconst CombinedDarkTheme = {\r\n  ...NavigationDarkTheme,\r\n  ...TemaOscuro,\r\n  colors: {\r\n    ...NavigationDarkTheme.colors,\r\n    ...TemaOscuro.colors,\r\n  },\r\n};\r\n\r\nconst CombinedDefaultTheme = {\r\n  ...NavigationDefaultTheme,\r\n  ...TemaClaro,\r\n  colors: {\r\n    ...NavigationDefaultTheme.colors,\r\n    ...TemaClaro.colors,\r\n  },\r\n};\r\n\r\ninterface PreferencesContextProps {\r\n  toggleTheme: () => void;\r\n  toggleThemeVersion: () => void;\r\n  toggleCollapsed: () => void;\r\n  toggleCustomFont: () => void;\r\n  toggleRippleEffect: () => void;\r\n  customFontLoaded: boolean;\r\n  rippleEffectEnabled: boolean;\r\n  collapsed: boolean;\r\n  theme: typeof TemaClaro | typeof TemaOscuro;\r\n}\r\n\r\nexport const PreferencesContext = React.createContext<PreferencesContextProps | null>(null);\r\n\r\nconst Drawer = createDrawerNavigator<{ Home: undefined }>();\r\n\r\nexport default function PaperExample() {\r\n  useKeepAwake();\r\n\r\n  const [fontsLoaded] = useFonts(customFonts);\r\n\r\n  const [isReady, setIsReady] = React.useState(false);\r\n  const [initialState, setInitialState] = React.useState<InitialState>();\r\n\r\n  const [isDarkMode, setIsDarkMode] = React.useState(false);\r\n  const [themeVersion, setThemeVersion] = React.useState<2 | 3>(3);\r\n  const [collapsed, setCollapsed] = React.useState(false);\r\n  const [customFontLoaded, setCustomFont] = React.useState(false);\r\n  const [rippleEffectEnabled, setRippleEffectEnabled] = React.useState(true);\r\n\r\n  const theme = isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\r\n\r\n  const toggleThemeVersion = () => setThemeVersion(prevVersion => (prevVersion === 2 ? 3 : 2));\r\n\r\n  React.useEffect(() => {\r\n    const restoreState = async () => {\r\n      try {\r\n        const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\r\n        const state = savedStateString ? JSON.parse(savedStateString) : undefined;\r\n        setInitialState(state);\r\n      } catch (e) {\r\n        // handle error\r\n      } finally {\r\n        setIsReady(true);\r\n      }\r\n    };\r\n\r\n    if (!isReady) {\r\n      restoreState();\r\n    }\r\n  }, [isReady]);\r\n\r\n  React.useEffect(() => {\r\n    const restorePrefs = async () => {\r\n      try {\r\n        const prefString = await AsyncStorage.getItem(PREFERENCES_KEY);\r\n        const preferences = JSON.parse(prefString || '');\r\n        setIsDarkMode(preferences.theme === 'dark');\r\n        setThemeVersion(preferences.themeVersion || 3);\r\n      } catch (e) {\r\n        // handle error\r\n      }\r\n    };\r\n\r\n    restorePrefs();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const savePrefs = async () => {\r\n      try {\r\n        await AsyncStorage.setItem(PREFERENCES_KEY, JSON.stringify({ theme: isDarkMode ? 'dark' : 'light', themeVersion }));\r\n      } catch (e) {\r\n        // handle error\r\n      }\r\n    };\r\n\r\n    savePrefs();\r\n  }, [isDarkMode, themeVersion]);\r\n\r\n  const preferences = React.useMemo(() => ({\r\n    toggleTheme: () => setIsDarkMode(!isDarkMode),\r\n    toggleThemeVersion,\r\n    toggleCollapsed: () => setCollapsed(!collapsed),\r\n    toggleCustomFont: () => setCustomFont(!customFontLoaded),\r\n    toggleRippleEffect: () => setRippleEffectEnabled(!rippleEffectEnabled),\r\n    customFontLoaded,\r\n    rippleEffectEnabled,\r\n    collapsed,\r\n    theme,\r\n  }), [isDarkMode, themeVersion, collapsed, customFontLoaded, rippleEffectEnabled, theme]);\r\n\r\n  if (!isReady || !fontsLoaded) {\r\n    return null;  // Consider adding a loading indicator here\r\n  }\r\n\r\n  return (\r\n    <UserProvider>\r\n      <PaperProvider theme={theme}>\r\n        <PreferencesContext.Provider value={preferences}>\r\n          <NavigationContainer theme={theme} initialState={initialState}>\r\n            <SafeAreaInsetsContext.Consumer>\r\n              {(insets) => {\r\n                const { left = 0, right = 0 } = insets || {};\r\n                const collapsedDrawerWidth = 80 + Math.max(left, right);\r\n                return (\r\n                  <Drawer.Navigator\r\n                    screenOptions={{\r\n                      drawerStyle: {\r\n                        width: collapsed ? collapsedDrawerWidth : undefined,\r\n                      },\r\n                    }}\r\n                    drawerContent={DrawerItems}\r\n                  >\r\n                    <Drawer.Screen name=\"Home\" component={App} options={{ headerShown: false }} />\r\n                  </Drawer.Navigator>\r\n                );\r\n              }}\r\n            </SafeAreaInsetsContext.Consumer>\r\n          </NavigationContainer>\r\n        </PreferencesContext.Provider>\r\n      </PaperProvider>\r\n    </UserProvider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}