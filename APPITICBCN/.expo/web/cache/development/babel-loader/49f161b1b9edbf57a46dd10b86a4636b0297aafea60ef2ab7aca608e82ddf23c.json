{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport { List } from 'react-native-paper';\nimport { SegmentedButtonDefault, SegmentedButtonDisabled, SegmentedButtonMultiselect, SegmentedButtonMultiselectIcons, SegmentedButtonOnlyIcons, SegmentedButtonOnlyIconsWithCheck, SegmentedButtonWithDensity, SegmentedButtonWithSelectedCheck, SegmentButtonCustomColorCheck } from \"./SegmentedButtons\";\nimport ScreenWrapper from \"../ScreenWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SegmentedButtonExample = function SegmentedButtonExample(_ref) {\n  var navigation = _ref.navigation;\n  return _jsxs(ScreenWrapper, {\n    children: [_jsxs(List.Section, {\n      title: `Segmented Button Example Usage`,\n      children: [_jsx(List.Item, {\n        title: \"Single select\",\n        description: \"Go to the example\",\n        onPress: function onPress() {\n          return navigation.navigate('segmentedButtonRealCase');\n        },\n        right: function right(props) {\n          return _jsx(List.Icon, _objectSpread(_objectSpread({}, props), {}, {\n            icon: \"arrow-right\"\n          }));\n        }\n      }), _jsx(List.Item, {\n        title: \"Multiselect select\",\n        description: \"Go to the example\",\n        onPress: function onPress() {\n          return navigation.navigate('segmentedButtonMultiselectRealCase');\n        },\n        right: function right(props) {\n          return _jsx(List.Icon, _objectSpread(_objectSpread({}, props), {}, {\n            icon: \"arrow-right\"\n          }));\n        }\n      })]\n    }), _jsx(SegmentedButtonDefault, {}), _jsx(SegmentedButtonWithSelectedCheck, {}), _jsx(SegmentedButtonOnlyIconsWithCheck, {}), _jsx(SegmentedButtonWithDensity, {}), _jsx(SegmentedButtonOnlyIcons, {}), _jsx(SegmentedButtonMultiselect, {}), _jsx(SegmentedButtonMultiselectIcons, {}), _jsx(SegmentButtonCustomColorCheck, {}), _jsx(SegmentedButtonDisabled, {})]\n  });\n};\nSegmentedButtonExample.title = 'Segmented Buttons';\nexport default SegmentedButtonExample;","map":{"version":3,"names":["React","List","SegmentedButtonDefault","SegmentedButtonDisabled","SegmentedButtonMultiselect","SegmentedButtonMultiselectIcons","SegmentedButtonOnlyIcons","SegmentedButtonOnlyIconsWithCheck","SegmentedButtonWithDensity","SegmentedButtonWithSelectedCheck","SegmentButtonCustomColorCheck","ScreenWrapper","jsx","_jsx","jsxs","_jsxs","SegmentedButtonExample","_ref","navigation","children","Section","title","Item","description","onPress","navigate","right","props","Icon","_objectSpread","icon"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/Examples/SegmentedButtonsExample.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport type { StackNavigationProp } from '@react-navigation/stack';\r\nimport { List } from 'react-native-paper';\r\n\r\nimport {\r\n  SegmentedButtonDefault,\r\n  SegmentedButtonDisabled,\r\n  SegmentedButtonMultiselect,\r\n  SegmentedButtonMultiselectIcons,\r\n  SegmentedButtonOnlyIcons,\r\n  SegmentedButtonOnlyIconsWithCheck,\r\n  SegmentedButtonWithDensity,\r\n  SegmentedButtonWithSelectedCheck,\r\n  SegmentButtonCustomColorCheck,\r\n} from './SegmentedButtons';\r\nimport ScreenWrapper from '../ScreenWrapper';\r\n\r\ntype Props = {\r\n  navigation: StackNavigationProp<{ [key: string]: undefined }>;\r\n};\r\n\r\nconst SegmentedButtonExample = ({ navigation }: Props) => {\r\n  return (\r\n    <ScreenWrapper>\r\n      <List.Section title={`Segmented Button Example Usage`}>\r\n        <List.Item\r\n          title=\"Single select\"\r\n          description=\"Go to the example\"\r\n          onPress={() => navigation.navigate('segmentedButtonRealCase')}\r\n          right={(props) => <List.Icon {...props} icon=\"arrow-right\" />}\r\n        />\r\n        <List.Item\r\n          title=\"Multiselect select\"\r\n          description=\"Go to the example\"\r\n          onPress={() =>\r\n            navigation.navigate('segmentedButtonMultiselectRealCase')\r\n          }\r\n          right={(props) => <List.Icon {...props} icon=\"arrow-right\" />}\r\n        />\r\n      </List.Section>\r\n      <SegmentedButtonDefault />\r\n      <SegmentedButtonWithSelectedCheck />\r\n      <SegmentedButtonOnlyIconsWithCheck />\r\n      <SegmentedButtonWithDensity />\r\n      <SegmentedButtonOnlyIcons />\r\n      <SegmentedButtonMultiselect />\r\n      <SegmentedButtonMultiselectIcons />\r\n      <SegmentButtonCustomColorCheck />\r\n      <SegmentedButtonDisabled />\r\n    </ScreenWrapper>\r\n  );\r\n};\r\n\r\nSegmentedButtonExample.title = 'Segmented Buttons';\r\n\r\nexport default SegmentedButtonExample;\r\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,SACEC,sBAAsB,EACtBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,+BAA+B,EAC/BC,wBAAwB,EACxBC,iCAAiC,EACjCC,0BAA0B,EAC1BC,gCAAgC,EAChCC,6BAA6B;AAE/B,OAAOC,aAAa;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAM7C,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAAC,IAAA,EAA8B;EAAA,IAAxBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAC1C,OACEH,KAAA,CAACJ,aAAa;IAAAQ,QAAA,GACZJ,KAAA,CAACd,IAAI,CAACmB,OAAO;MAACC,KAAK,EAAG,gCAAgC;MAAAF,QAAA,GACpDN,IAAA,CAACZ,IAAI,CAACqB,IAAI;QACRD,KAAK,EAAC,eAAe;QACrBE,WAAW,EAAC,mBAAmB;QAC/BC,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMN,UAAU,CAACO,QAAQ,CAAC,yBAAyB,CAAC;QAAA,CAAC;QAC9DC,KAAK,EAAE,SAAAA,MAACC,KAAK;UAAA,OAAKd,IAAA,CAACZ,IAAI,CAAC2B,IAAI,EAAAC,aAAA,CAAAA,aAAA,KAAKF,KAAK;YAAEG,IAAI,EAAC;UAAa,EAAE,CAAC;QAAA;MAAC,CAC/D,CAAC,EACFjB,IAAA,CAACZ,IAAI,CAACqB,IAAI;QACRD,KAAK,EAAC,oBAAoB;QAC1BE,WAAW,EAAC,mBAAmB;QAC/BC,OAAO,EAAE,SAAAA,QAAA;UAAA,OACPN,UAAU,CAACO,QAAQ,CAAC,oCAAoC,CAAC;QAAA,CAC1D;QACDC,KAAK,EAAE,SAAAA,MAACC,KAAK;UAAA,OAAKd,IAAA,CAACZ,IAAI,CAAC2B,IAAI,EAAAC,aAAA,CAAAA,aAAA,KAAKF,KAAK;YAAEG,IAAI,EAAC;UAAa,EAAE,CAAC;QAAA;MAAC,CAC/D,CAAC;IAAA,CACU,CAAC,EACfjB,IAAA,CAACX,sBAAsB,IAAE,CAAC,EAC1BW,IAAA,CAACJ,gCAAgC,IAAE,CAAC,EACpCI,IAAA,CAACN,iCAAiC,IAAE,CAAC,EACrCM,IAAA,CAACL,0BAA0B,IAAE,CAAC,EAC9BK,IAAA,CAACP,wBAAwB,IAAE,CAAC,EAC5BO,IAAA,CAACT,0BAA0B,IAAE,CAAC,EAC9BS,IAAA,CAACR,+BAA+B,IAAE,CAAC,EACnCQ,IAAA,CAACH,6BAA6B,IAAE,CAAC,EACjCG,IAAA,CAACV,uBAAuB,IAAE,CAAC;EAAA,CACd,CAAC;AAEpB,CAAC;AAEDa,sBAAsB,CAACK,KAAK,GAAG,mBAAmB;AAElD,eAAeL,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}