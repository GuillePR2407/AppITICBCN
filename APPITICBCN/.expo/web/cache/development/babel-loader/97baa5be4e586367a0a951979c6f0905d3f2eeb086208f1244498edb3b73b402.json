{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport CookieManager from 'react-native-cookies';\nvar API_URL = 'http://localhost:8082/api';\nexport var loginUser = function () {\n  var _ref = _asyncToGenerator(function* (email, password) {\n    try {\n      var response = yield axios.post(`${API_URL}/auth/signin`, {\n        email: email,\n        password: password\n      });\n      console.log('Login successful:', response.data);\n      var cookies = yield CookieManager.get(API_URL);\n      console.log('Cookies:', cookies);\n      var jwtToken = cookies.jwtToken.value;\n      console.log('JWT Token:', jwtToken);\n    } catch (error) {\n      console.error('Login Error:', error);\n    }\n  });\n  return function loginUser(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","CookieManager","API_URL","loginUser","_ref","_asyncToGenerator","email","password","response","post","console","log","data","cookies","get","jwtToken","value","error","_x","_x2","apply","arguments"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/services/authService.tsx"],"sourcesContent":["// AuthService.ts\r\nimport axios from 'axios';\r\nimport CookieManager from 'react-native-cookies';\r\n\r\nconst API_URL = 'http://localhost:8082/api';\r\n\r\nexport const loginUser = async (email: string, password: string): Promise<void> => {\r\n    try {\r\n        // Hacer el POST para iniciar sesión\r\n        const response = await axios.post(`${API_URL}/auth/signin`, {\r\n        email,\r\n        password,\r\n        });\r\n\r\n        // Tras iniciar sesión, las cookies son manejadas automáticamente por el navegador,\r\n        // pero en React Native necesitas gestionarlas manualmente.\r\n        console.log('Login successful:', response.data);\r\n\r\n        // Aquí puedes acceder a las cookies si necesitas procesar algo específico\r\n        const cookies = await CookieManager.get(API_URL);\r\n        console.log('Cookies:', cookies);\r\n\r\n        // Suponiendo que la cookie del JWT se llama 'jwtToken'\r\n        const jwtToken = cookies.jwtToken.value;\r\n        console.log('JWT Token:', jwtToken);\r\n\r\n        // Guardar el JWT en algún lugar seguro, si es necesario.\r\n        // AsyncStorage, por ejemplo, aunque con cookies normalmente no es necesario.\r\n\r\n    } catch (error) {\r\n        console.error('Login Error:', error);\r\n    }\r\n}\r\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;AAEhD,IAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,IAAMC,SAAS;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAa,EAAEC,QAAgB,EAAoB;IAC/E,IAAI;MAEA,IAAMC,QAAQ,SAASR,KAAK,CAACS,IAAI,CAAE,GAAEP,OAAQ,cAAa,EAAE;QAC5DI,KAAK,EAALA,KAAK;QACLC,QAAQ,EAARA;MACA,CAAC,CAAC;MAIFG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,QAAQ,CAACI,IAAI,CAAC;MAG/C,IAAMC,OAAO,SAASZ,aAAa,CAACa,GAAG,CAACZ,OAAO,CAAC;MAChDQ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEE,OAAO,CAAC;MAGhC,IAAME,QAAQ,GAAGF,OAAO,CAACE,QAAQ,CAACC,KAAK;MACvCN,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,QAAQ,CAAC;IAKvC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACxC;EACJ,CAAC;EAAA,gBA1BYd,SAASA,CAAAe,EAAA,EAAAC,GAAA;IAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0BrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}