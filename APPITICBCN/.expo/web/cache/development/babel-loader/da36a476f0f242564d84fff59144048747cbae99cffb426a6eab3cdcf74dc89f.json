{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, DarkTheme as NavigationDarkTheme, DefaultTheme as NavigationDefaultTheme } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { useKeepAwake } from 'expo-keep-awake';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport DrawerItems from \"./items/DrawerItems\";\nimport App from \"./RootNavigator\";\nimport { TemaClaro, TemaOscuro } from \"../assets/styles/CustomTheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar PERSISTENCE_KEY = 'NAVIGATION_STATE';\nvar PREFERENCES_KEY = 'APP_PREFERENCES';\nexport var PreferencesContext = React.createContext(null);\nvar Drawer = createDrawerNavigator();\nexport default function PaperExample() {\n  useKeepAwake();\n  var _useFonts = useFonts({\n      Abel: require(\"../assets/fonts/Abel-Regular.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isReady = _React$useState2[0],\n    setIsReady = _React$useState2[1];\n  var _React$useState3 = React.useState(),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    initialState = _React$useState4[0],\n    setInitialState = _React$useState4[1];\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    isDarkMode = _React$useState6[0],\n    setIsDarkMode = _React$useState6[1];\n  var _React$useState7 = React.useState(3),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    themeVersion = _React$useState8[0],\n    setThemeVersion = _React$useState8[1];\n  var _React$useState9 = React.useState(false),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    collapsed = _React$useState10[0],\n    setCollapsed = _React$useState10[1];\n  var _React$useState11 = React.useState(false),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    customFontLoaded = _React$useState12[0],\n    setCustomFont = _React$useState12[1];\n  var _React$useState13 = React.useState(true),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    rippleEffectEnabled = _React$useState14[0],\n    setRippleEffectEnabled = _React$useState14[1];\n  var theme = React.useMemo(function () {\n    return isDarkMode ? TemaOscuro : TemaClaro;\n  }, [isDarkMode]);\n  React.useEffect(function () {\n    var restoreState = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var savedStateString = yield AsyncStorage.getItem(PERSISTENCE_KEY);\n          var state = JSON.parse(savedStateString || '');\n          setInitialState(state);\n        } catch (e) {} finally {\n          setIsReady(true);\n        }\n      });\n      return function restoreState() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n  React.useEffect(function () {\n    var restorePrefs = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var prefString = yield AsyncStorage.getItem(PREFERENCES_KEY);\n          var _preferences = JSON.parse(prefString || '');\n          if (_preferences) {\n            setIsDarkMode(_preferences.theme === 'dark');\n          }\n        } catch (e) {}\n      });\n      return function restorePrefs() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    restorePrefs();\n  }, []);\n  React.useEffect(function () {\n    var savePrefs = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.setItem(PREFERENCES_KEY, JSON.stringify({\n            theme: isDarkMode ? 'dark' : 'light'\n          }));\n        } catch (e) {}\n      });\n      return function savePrefs() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    savePrefs();\n  }, [isDarkMode]);\n  var preferences = React.useMemo(function () {\n    return {\n      toggleTheme: function toggleTheme() {\n        return setIsDarkMode(!isDarkMode);\n      },\n      toggleCollapsed: function toggleCollapsed() {\n        return setCollapsed(!collapsed);\n      },\n      toggleCustomFont: function toggleCustomFont() {\n        return setCustomFontLoaded(!customFontLoaded);\n      },\n      toggleRippleEffect: function toggleRippleEffect() {\n        return setRippleEffectEnabled(!rippleEffectEnabled);\n      },\n      customFontLoaded: customFontLoaded,\n      rippleEffectEnabled: rippleEffectEnabled,\n      collapsed: collapsed,\n      theme: theme\n    };\n  }, [theme, collapsed, customFontLoaded, rippleEffectEnabled, isDarkMode]);\n  if (!isReady || !fontsLoaded) {\n    return null;\n  }\n  var _adaptNavigationTheme = adaptNavigationTheme({\n      reactNavigationLight: NavigationDefaultTheme,\n      reactNavigationDark: NavigationDarkTheme\n    }),\n    LightTheme = _adaptNavigationTheme.LightTheme,\n    DarkTheme = _adaptNavigationTheme.DarkTheme;\n  var CombinedDefaultTheme = _objectSpread(_objectSpread(_objectSpread({}, MD3LightTheme), LightTheme), {}, {\n    colors: _objectSpread(_objectSpread({}, MD3LightTheme.colors), LightTheme.colors)\n  });\n  var CombinedDarkTheme = _objectSpread(_objectSpread(_objectSpread({}, MD3DarkTheme), DarkTheme), {}, {\n    colors: _objectSpread(_objectSpread({}, MD3DarkTheme.colors), DarkTheme.colors)\n  });\n  var configuredFontTheme = _objectSpread(_objectSpread({}, combinedTheme), {}, {\n    fonts: configureFonts({\n      config: {\n        fontFamily: 'Abel'\n      }\n    })\n  });\n  return _jsx(PaperProvider, {\n    settings: {\n      rippleEffectEnabled: preferences.rippleEffectEnabled\n    },\n    theme: customFontLoaded ? configuredFontTheme : theme,\n    children: _jsx(PreferencesContext.Provider, {\n      value: preferences,\n      children: _jsx(React.Fragment, {\n        children: _jsx(NavigationContainer, {\n          theme: combinedTheme,\n          initialState: initialState,\n          onStateChange: function onStateChange(state) {\n            return AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state));\n          },\n          children: _jsx(SafeAreaInsetsContext.Consumer, {\n            children: function children(insets) {\n              var _ref4 = insets || {\n                  left: 0,\n                  right: 0\n                },\n                left = _ref4.left,\n                right = _ref4.right;\n              var collapsedDrawerWidth = 80 + Math.max(left, right);\n              return _jsx(Drawer.Navigator, {\n                screenOptions: {\n                  drawerStyle: collapsed && {\n                    width: collapsedDrawerWidth\n                  }\n                },\n                drawerContent: function drawerContent() {\n                  return _jsx(DrawerItems, {});\n                },\n                children: _jsx(Drawer.Screen, {\n                  name: \"Home\",\n                  component: App,\n                  options: {\n                    headerShown: false\n                  }\n                })\n              });\n            }\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","AsyncStorage","createDrawerNavigator","NavigationContainer","DarkTheme","NavigationDarkTheme","DefaultTheme","NavigationDefaultTheme","useFonts","useKeepAwake","Provider","PaperProvider","SafeAreaInsetsContext","DrawerItems","App","TemaClaro","TemaOscuro","jsx","_jsx","PERSISTENCE_KEY","PREFERENCES_KEY","PreferencesContext","createContext","Drawer","PaperExample","_useFonts","Abel","require","_useFonts2","_slicedToArray","fontsLoaded","_React$useState","useState","_React$useState2","isReady","setIsReady","_React$useState3","_React$useState4","initialState","setInitialState","_React$useState5","_React$useState6","isDarkMode","setIsDarkMode","_React$useState7","_React$useState8","themeVersion","setThemeVersion","_React$useState9","_React$useState10","collapsed","setCollapsed","_React$useState11","_React$useState12","customFontLoaded","setCustomFont","_React$useState13","_React$useState14","rippleEffectEnabled","setRippleEffectEnabled","theme","useMemo","useEffect","restoreState","_ref","_asyncToGenerator","savedStateString","getItem","state","JSON","parse","e","apply","arguments","restorePrefs","_ref2","prefString","preferences","savePrefs","_ref3","setItem","stringify","toggleTheme","toggleCollapsed","toggleCustomFont","setCustomFontLoaded","toggleRippleEffect","_adaptNavigationTheme","adaptNavigationTheme","reactNavigationLight","reactNavigationDark","LightTheme","CombinedDefaultTheme","_objectSpread","MD3LightTheme","colors","CombinedDarkTheme","MD3DarkTheme","configuredFontTheme","combinedTheme","fonts","configureFonts","config","fontFamily","settings","children","value","Fragment","onStateChange","Consumer","insets","_ref4","left","right","collapsedDrawerWidth","Math","max","Navigator","screenOptions","drawerStyle","width","drawerContent","Screen","name","component","options","headerShown"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport {\r\n  InitialState,\r\n  NavigationContainer,\r\n  DarkTheme as NavigationDarkTheme,\r\n  DefaultTheme as NavigationDefaultTheme,\r\n} from '@react-navigation/native';\r\nimport { useFonts } from 'expo-font';\r\nimport { useKeepAwake } from 'expo-keep-awake';\r\nimport {\r\n  Provider as PaperProvider,\r\n} from 'react-native-paper';\r\n\r\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\r\n\r\nimport DrawerItems from './items/DrawerItems';\r\nimport App from './RootNavigator';\r\n\r\nimport { TemaClaro, TemaOscuro } from '../assets/styles/CustomTheme';\r\n\r\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE';\r\nconst PREFERENCES_KEY = 'APP_PREFERENCES';\r\n\r\nexport const PreferencesContext = React.createContext<{\r\n  toggleTheme: () => void;\r\n  toggleThemeVersion: () => void;\r\n  toggleCollapsed: () => void;\r\n  toggleCustomFont: () => void;\r\n  toggleRippleEffect: () => void;\r\n  customFontLoaded: boolean;\r\n  rippleEffectEnabled: boolean;\r\n  collapsed: boolean;\r\n  theme: typeof TemaClaro | typeof TemaOscuro;\r\n} | null>(null);\r\n\r\nconst Drawer = createDrawerNavigator<{ Home: undefined }>();\r\n\r\nexport default function PaperExample() {\r\n  useKeepAwake();\r\n\r\n  const [fontsLoaded] = useFonts({\r\n    Abel: require('../assets/fonts/Abel-Regular.ttf'),\r\n  });\r\n\r\n  const [isReady, setIsReady] = React.useState(false);\r\n  const [initialState, setInitialState] = React.useState<\r\n    InitialState | undefined\r\n  >();\r\n\r\n  const [isDarkMode, setIsDarkMode] = React.useState(false);\r\n  const [themeVersion, setThemeVersion] = React.useState<2 | 3>(3);\r\n  const [collapsed, setCollapsed] = React.useState(false);\r\n  const [customFontLoaded, setCustomFont] = React.useState(false);\r\n  const [rippleEffectEnabled, setRippleEffectEnabled] = React.useState(true);\r\n\r\n  const theme = React.useMemo(() => isDarkMode ? TemaOscuro : TemaClaro, [isDarkMode]);\r\n  \r\n\r\n  React.useEffect(() => {\r\n    const restoreState = async () => {\r\n      try {\r\n        const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\r\n        const state = JSON.parse(savedStateString || '');\r\n\r\n        setInitialState(state);\r\n      } catch (e) {\r\n        // ignore error\r\n      } finally {\r\n        setIsReady(true);\r\n      }\r\n    };\r\n\r\n    if (!isReady) {\r\n      restoreState();\r\n    }\r\n  }, [isReady]);\r\n\r\n  React.useEffect(() => {\r\n    const restorePrefs = async () => {\r\n      try {\r\n        const prefString = await AsyncStorage.getItem(PREFERENCES_KEY);\r\n        const preferences = JSON.parse(prefString || '');\r\n\r\n        if (preferences) {\r\n          setIsDarkMode(preferences.theme === 'dark');\r\n        }\r\n      } catch (e) {\r\n        // ignore error\r\n      }\r\n    };\r\n\r\n    restorePrefs();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const savePrefs = async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\r\n          PREFERENCES_KEY,\r\n          JSON.stringify({\r\n            theme: isDarkMode ? 'dark' : 'light',\r\n          })\r\n        );\r\n      } catch (e) {\r\n        // ignore error\r\n      }\r\n    };\r\n\r\n    savePrefs();\r\n  }, [isDarkMode]);\r\n\r\n  const preferences = React.useMemo(() => ({\r\n    toggleTheme: () => setIsDarkMode(!isDarkMode),\r\n    toggleCollapsed: () => setCollapsed(!collapsed),\r\n    toggleCustomFont: () => setCustomFontLoaded(!customFontLoaded),\r\n    toggleRippleEffect: () => setRippleEffectEnabled(!rippleEffectEnabled),\r\n    customFontLoaded,\r\n    rippleEffectEnabled,\r\n    collapsed,\r\n    theme,\r\n  }), [theme, collapsed, customFontLoaded, rippleEffectEnabled, isDarkMode]);\r\n\r\n  if (!isReady || !fontsLoaded) {\r\n    return null;\r\n  }\r\n\r\n  const { LightTheme, DarkTheme } = adaptNavigationTheme({\r\n    reactNavigationLight: NavigationDefaultTheme,\r\n    reactNavigationDark: NavigationDarkTheme,\r\n  });\r\n\r\n  const CombinedDefaultTheme = {\r\n    ...MD3LightTheme,\r\n    ...LightTheme,\r\n    colors: {\r\n      ...MD3LightTheme.colors,\r\n      ...LightTheme.colors,\r\n    },\r\n  };\r\n\r\n  const CombinedDarkTheme = {\r\n    ...MD3DarkTheme,\r\n    ...DarkTheme,\r\n    colors: {\r\n      ...MD3DarkTheme.colors,\r\n      ...DarkTheme.colors,\r\n    },\r\n  };\r\n\r\n  const configuredFontTheme = {\r\n    ...combinedTheme,\r\n    fonts: configureFonts({\r\n      config: {\r\n        fontFamily: 'Abel',\r\n      },\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <PaperProvider\r\n      settings={{ rippleEffectEnabled: preferences.rippleEffectEnabled }}\r\n      theme={customFontLoaded ? configuredFontTheme : theme}\r\n    >\r\n      <PreferencesContext.Provider value={preferences}>\r\n        <React.Fragment>\r\n          <NavigationContainer\r\n            theme={combinedTheme}\r\n            initialState={initialState}\r\n            onStateChange={(state) =>\r\n              AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))\r\n            }\r\n          >\r\n            <SafeAreaInsetsContext.Consumer>\r\n              {(insets) => {\r\n                const { left, right } = insets || { left: 0, right: 0 };\r\n                const collapsedDrawerWidth = 80 + Math.max(left, right);\r\n                return (\r\n                  <Drawer.Navigator\r\n                    screenOptions={{\r\n                      drawerStyle: collapsed && {\r\n                        width: collapsedDrawerWidth,\r\n                      },\r\n                    }}\r\n                    drawerContent={() => <DrawerItems />}\r\n                  >\r\n                    <Drawer.Screen\r\n                      name=\"Home\"\r\n                      component={App}\r\n                      options={{ headerShown: false }}\r\n                    />\r\n                  </Drawer.Navigator>\r\n                );\r\n              }}\r\n            </SafeAreaInsetsContext.Consumer>\r\n          </NavigationContainer>\r\n        </React.Fragment>\r\n      </PreferencesContext.Provider>\r\n    </PaperProvider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}