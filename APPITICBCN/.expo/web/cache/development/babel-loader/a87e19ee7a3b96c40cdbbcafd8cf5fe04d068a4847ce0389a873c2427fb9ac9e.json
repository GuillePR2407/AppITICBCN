{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { List, SegmentedButtons } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar themeMock = {\n  colors: {\n    onSurface: '#3700B3',\n    secondaryContainer: '#3700B3',\n    onSecondaryContainer: '#FFFFFF'\n  }\n};\nvar SegmentButtonCustomColorCheck = function SegmentButtonCustomColorCheck() {\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    themeValue = _React$useState2[0],\n    setThemeValue = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    colorValue = _React$useState4[0],\n    setColorValue = _React$useState4[1];\n  return _jsxs(List.Section, {\n    title: `Segmented Button - Custom Colors`,\n    children: [_jsx(List.Subheader, {\n      children: \"Via Theme\"\n    }), _jsx(SegmentedButtons, {\n      value: themeValue,\n      onValueChange: setThemeValue,\n      theme: themeMock,\n      buttons: [{\n        value: 'walk',\n        icon: 'walk',\n        label: 'Walking',\n        disabled: true,\n        style: styles.button\n      }, {\n        value: 'train',\n        icon: 'train',\n        label: 'Transit',\n        style: styles.button\n      }, {\n        value: 'drive',\n        icon: 'car',\n        label: 'Driving',\n        style: styles.button\n      }],\n      style: styles.group\n    }), _jsx(List.Subheader, {\n      children: \"Via Props\"\n    }), _jsx(SegmentedButtons, {\n      value: colorValue,\n      onValueChange: setColorValue,\n      theme: themeMock,\n      buttons: [{\n        value: 'walk',\n        icon: 'walk',\n        label: 'Walking',\n        checkedColor: '#F9AA33',\n        style: styles.button\n      }, {\n        value: 'train',\n        icon: 'train',\n        showSelectedCheck: true,\n        checkedColor: '#F9AA33',\n        uncheckedColor: '#000000',\n        label: 'Transit',\n        style: styles.button\n      }, {\n        value: 'drive',\n        icon: 'car',\n        checkedColor: '#F9AA33',\n        label: 'Driving',\n        style: styles.button\n      }],\n      style: styles.group\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1\n  },\n  group: {\n    paddingHorizontal: 20,\n    justifyContent: 'center'\n  }\n});\nexport default SegmentButtonCustomColorCheck;","map":{"version":3,"names":["React","StyleSheet","List","SegmentedButtons","jsx","_jsx","jsxs","_jsxs","themeMock","colors","onSurface","secondaryContainer","onSecondaryContainer","SegmentButtonCustomColorCheck","_React$useState","useState","_React$useState2","_slicedToArray","themeValue","setThemeValue","_React$useState3","_React$useState4","colorValue","setColorValue","Section","title","children","Subheader","value","onValueChange","theme","buttons","icon","label","disabled","style","styles","button","group","checkedColor","showSelectedCheck","uncheckedColor","create","flex","paddingHorizontal","justifyContent"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/Examples/SegmentedButtons/SegmentedButtonCustomColorCheck.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nimport { List, SegmentedButtons } from 'react-native-paper';\r\n\r\nconst themeMock = {\r\n  colors: {\r\n    onSurface: '#3700B3',\r\n    secondaryContainer: '#3700B3',\r\n    onSecondaryContainer: '#FFFFFF',\r\n  },\r\n};\r\n\r\nconst SegmentButtonCustomColorCheck = () => {\r\n  const [themeValue, setThemeValue] = React.useState('');\r\n  const [colorValue, setColorValue] = React.useState('');\r\n\r\n  return (\r\n    <List.Section title={`Segmented Button - Custom Colors`}>\r\n      <List.Subheader>Via Theme</List.Subheader>\r\n      <SegmentedButtons\r\n        value={themeValue}\r\n        onValueChange={setThemeValue}\r\n        theme={themeMock}\r\n        buttons={[\r\n          {\r\n            value: 'walk',\r\n            icon: 'walk',\r\n            label: 'Walking',\r\n            disabled: true,\r\n            style: styles.button,\r\n          },\r\n          {\r\n            value: 'train',\r\n            icon: 'train',\r\n            label: 'Transit',\r\n            style: styles.button,\r\n          },\r\n          {\r\n            value: 'drive',\r\n            icon: 'car',\r\n            label: 'Driving',\r\n            style: styles.button,\r\n          },\r\n        ]}\r\n        style={styles.group}\r\n      />\r\n      <List.Subheader>Via Props</List.Subheader>\r\n      <SegmentedButtons\r\n        value={colorValue}\r\n        onValueChange={setColorValue}\r\n        theme={themeMock}\r\n        buttons={[\r\n          {\r\n            value: 'walk',\r\n            icon: 'walk',\r\n            label: 'Walking',\r\n            checkedColor: '#F9AA33',\r\n            style: styles.button,\r\n          },\r\n          {\r\n            value: 'train',\r\n            icon: 'train',\r\n            showSelectedCheck: true,\r\n            checkedColor: '#F9AA33',\r\n            uncheckedColor: '#000000',\r\n            label: 'Transit',\r\n            style: styles.button,\r\n          },\r\n          {\r\n            value: 'drive',\r\n            icon: 'car',\r\n            checkedColor: '#F9AA33',\r\n            label: 'Driving',\r\n            style: styles.button,\r\n          },\r\n        ]}\r\n        style={styles.group}\r\n      />\r\n    </List.Section>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    flex: 1,\r\n  },\r\n  group: { paddingHorizontal: 20, justifyContent: 'center' },\r\n});\r\n\r\nexport default SegmentButtonCustomColorCheck;\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAG/B,SAASC,IAAI,EAAEC,gBAAgB,QAAQ,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5D,IAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE;IACNC,SAAS,EAAE,SAAS;IACpBC,kBAAkB,EAAE,SAAS;IAC7BC,oBAAoB,EAAE;EACxB;AACF,CAAC;AAED,IAAMC,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAA,EAAS;EAC1C,IAAAC,eAAA,GAAoCd,KAAK,CAACe,QAAQ,CAAC,EAAE,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA/CI,UAAU,GAAAF,gBAAA;IAAEG,aAAa,GAAAH,gBAAA;EAChC,IAAAI,gBAAA,GAAoCpB,KAAK,CAACe,QAAQ,CAAC,EAAE,CAAC;IAAAM,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;IAA/CE,UAAU,GAAAD,gBAAA;IAAEE,aAAa,GAAAF,gBAAA;EAEhC,OACEd,KAAA,CAACL,IAAI,CAACsB,OAAO;IAACC,KAAK,EAAG,kCAAkC;IAAAC,QAAA,GACtDrB,IAAA,CAACH,IAAI,CAACyB,SAAS;MAAAD,QAAA,EAAC;IAAS,CAAgB,CAAC,EAC1CrB,IAAA,CAACF,gBAAgB;MACfyB,KAAK,EAAEV,UAAW;MAClBW,aAAa,EAAEV,aAAc;MAC7BW,KAAK,EAAEtB,SAAU;MACjBuB,OAAO,EAAE,CACP;QACEH,KAAK,EAAE,MAAM;QACbI,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,EACD;QACET,KAAK,EAAE,OAAO;QACdI,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,SAAS;QAChBE,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,EACD;QACET,KAAK,EAAE,OAAO;QACdI,IAAI,EAAE,KAAK;QACXC,KAAK,EAAE,SAAS;QAChBE,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,CACD;MACFF,KAAK,EAAEC,MAAM,CAACE;IAAM,CACrB,CAAC,EACFjC,IAAA,CAACH,IAAI,CAACyB,SAAS;MAAAD,QAAA,EAAC;IAAS,CAAgB,CAAC,EAC1CrB,IAAA,CAACF,gBAAgB;MACfyB,KAAK,EAAEN,UAAW;MAClBO,aAAa,EAAEN,aAAc;MAC7BO,KAAK,EAAEtB,SAAU;MACjBuB,OAAO,EAAE,CACP;QACEH,KAAK,EAAE,MAAM;QACbI,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE,SAAS;QAChBM,YAAY,EAAE,SAAS;QACvBJ,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,EACD;QACET,KAAK,EAAE,OAAO;QACdI,IAAI,EAAE,OAAO;QACbQ,iBAAiB,EAAE,IAAI;QACvBD,YAAY,EAAE,SAAS;QACvBE,cAAc,EAAE,SAAS;QACzBR,KAAK,EAAE,SAAS;QAChBE,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,EACD;QACET,KAAK,EAAE,OAAO;QACdI,IAAI,EAAE,KAAK;QACXO,YAAY,EAAE,SAAS;QACvBN,KAAK,EAAE,SAAS;QAChBE,KAAK,EAAEC,MAAM,CAACC;MAChB,CAAC,CACD;MACFF,KAAK,EAAEC,MAAM,CAACE;IAAM,CACrB,CAAC;EAAA,CACU,CAAC;AAEnB,CAAC;AAED,IAAMF,MAAM,GAAGnC,UAAU,CAACyC,MAAM,CAAC;EAC/BL,MAAM,EAAE;IACNM,IAAI,EAAE;EACR,CAAC;EACDL,KAAK,EAAE;IAAEM,iBAAiB,EAAE,EAAE;IAAEC,cAAc,EAAE;EAAS;AAC3D,CAAC,CAAC;AAEF,eAAehC,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}