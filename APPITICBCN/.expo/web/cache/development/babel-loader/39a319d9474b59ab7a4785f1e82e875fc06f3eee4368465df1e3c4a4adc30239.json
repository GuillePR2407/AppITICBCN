{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useFonts } from 'expo-font';\nimport { configureFonts, HelperText, List, MD2Colors, MD3Colors, TextInput } from 'react-native-paper';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { useExampleTheme } from \"../index\";\nimport { inputReducer } from \"../../utils\";\nimport ScreenWrapper from \"../ScreenWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MAX_LENGTH = 20;\nvar initialState = {\n  text: '',\n  customIconText: '',\n  name: '',\n  outlinedText: '',\n  largeText: '',\n  flatTextPassword: 'Password',\n  outlinedLargeText: '',\n  outlinedCustomLabel: '',\n  outlinedTextPassword: '',\n  nameNoPadding: '',\n  customStyleText: '',\n  nameRequired: '',\n  flatDenseText: '',\n  flatDense: '',\n  outlinedDenseText: '',\n  outlinedDense: '',\n  flatMultiline: '',\n  flatTextArea: '',\n  flatUnderlineColors: '',\n  outlinedMultiline: '',\n  outlinedTextArea: '',\n  outlinedColors: '',\n  outlinedLongLabel: '',\n  maxLengthName: '',\n  flatTextSecureEntry: true,\n  outlineTextSecureEntry: true,\n  iconsColor: {\n    flatLeftIcon: undefined,\n    flatRightIcon: undefined,\n    outlineLeftIcon: undefined,\n    outlineRightIcon: undefined,\n    customIcon: undefined\n  }\n};\nvar TextInputAvoidingView = function TextInputAvoidingView(_ref) {\n  var children = _ref.children;\n  return Platform.OS === 'ios' ? _jsx(KeyboardAvoidingView, {\n    style: styles.wrapper,\n    behavior: \"padding\",\n    keyboardVerticalOffset: 80,\n    children: children\n  }) : _jsx(_Fragment, {\n    children: children\n  });\n};\nvar TextInputExample = function TextInputExample() {\n  var _React$useReducer = React.useReducer(inputReducer, initialState),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    state = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  var text = state.text,\n    customIconText = state.customIconText,\n    name = state.name,\n    outlinedText = state.outlinedText,\n    largeText = state.largeText,\n    flatTextPassword = state.flatTextPassword,\n    outlinedLargeText = state.outlinedLargeText,\n    outlinedCustomLabel = state.outlinedCustomLabel,\n    outlinedTextPassword = state.outlinedTextPassword,\n    nameNoPadding = state.nameNoPadding,\n    customStyleText = state.customStyleText,\n    nameRequired = state.nameRequired,\n    flatDenseText = state.flatDenseText,\n    flatDense = state.flatDense,\n    outlinedDenseText = state.outlinedDenseText,\n    outlinedDense = state.outlinedDense,\n    flatMultiline = state.flatMultiline,\n    flatTextArea = state.flatTextArea,\n    flatUnderlineColors = state.flatUnderlineColors,\n    outlinedMultiline = state.outlinedMultiline,\n    outlinedTextArea = state.outlinedTextArea,\n    outlinedColors = state.outlinedColors,\n    maxLengthName = state.maxLengthName,\n    flatTextSecureEntry = state.flatTextSecureEntry,\n    outlineTextSecureEntry = state.outlineTextSecureEntry,\n    _state$iconsColor = state.iconsColor,\n    flatLeftIcon = _state$iconsColor.flatLeftIcon,\n    flatRightIcon = _state$iconsColor.flatRightIcon,\n    outlineLeftIcon = _state$iconsColor.outlineLeftIcon,\n    outlineRightIcon = _state$iconsColor.outlineRightIcon,\n    customIcon = _state$iconsColor.customIcon;\n  var _isUsernameValid = function _isUsernameValid(name) {\n    return /^[a-zA-Z]*$/.test(name);\n  };\n  var theme = useExampleTheme();\n  var inputActionHandler = function inputActionHandler(type, payload) {\n    return dispatch({\n      type: type,\n      payload: payload\n    });\n  };\n  var changeIconColor = function changeIconColor(name) {\n    var _theme$colors;\n    var color = state.iconsColor[name];\n    var newColors = _objectSpread(_objectSpread({}, state.iconsColor), {}, _defineProperty({}, name, !color ? theme.isV3 ? theme.colors.primary : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.accent : undefined));\n    dispatch({\n      type: 'iconsColor',\n      payload: newColors\n    });\n  };\n  var _useFonts = useFonts({\n      Abel: require(\"../../assets/fonts/Abel-Regular.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var _React$useState = React.useState('flat'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expandedId = _React$useState2[0],\n    setExpandedId = _React$useState2[1];\n  var onAccordionPress = function onAccordionPress(id) {\n    return setExpandedId(expandedId === id ? undefined : id);\n  };\n  return _jsx(TextInputAvoidingView, {\n    children: _jsx(ScreenWrapper, {\n      keyboardShouldPersistTaps: 'always',\n      removeClippedSubviews: false,\n      children: _jsxs(List.AccordionGroup, {\n        expandedId: expandedId,\n        onAccordionPress: onAccordionPress,\n        children: [_jsxs(List.Accordion, {\n          title: \"Flat inputs\",\n          id: \"flat\",\n          children: [_jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input\",\n            placeholder: \"Type something\",\n            value: text,\n            onChangeText: function onChangeText(text) {\n              return inputActionHandler('text', text);\n            },\n            left: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: flatLeftIcon,\n              onPress: function onPress() {\n                changeIconColor('flatLeftIcon');\n              }\n            }),\n            maxLength: 100,\n            right: _jsx(TextInput.Affix, {\n              text: `${text.length}/100`\n            })\n          }), _jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input with custom icon\",\n            placeholder: \"Type something\",\n            value: customIconText,\n            onChangeText: function onChangeText(text) {\n              return inputActionHandler('customIconText', text);\n            },\n            maxLength: 100,\n            right: _jsx(TextInput.Affix, {\n              text: `${customIconText.length}/100`\n            }),\n            left: _jsx(TextInput.Icon, {\n              icon: function icon() {\n                return _jsx(Icon, {\n                  name: \"home\",\n                  size: 24,\n                  color: customIcon,\n                  onPress: function onPress() {\n                    changeIconColor('customIcon');\n                  }\n                });\n              }\n            })\n          }), _jsx(TextInput, {\n            style: [styles.inputContainerStyle, styles.fontSize],\n            label: \"Flat input large font\",\n            placeholder: \"Type something\",\n            value: largeText,\n            onChangeText: function onChangeText(largeText) {\n              return inputActionHandler('largeText', largeText);\n            },\n            left: _jsx(TextInput.Affix, {\n              text: \"#\"\n            }),\n            right: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: flatRightIcon,\n              onPress: function onPress() {\n                changeIconColor('flatRightIcon');\n              }\n            })\n          }), _jsx(TextInput, {\n            style: [styles.inputContainerStyle, styles.fontSize],\n            label: \"Flat input large font\",\n            placeholder: \"Type something\",\n            value: flatTextPassword,\n            onChangeText: function onChangeText(flatTextPassword) {\n              return inputActionHandler('flatTextPassword', flatTextPassword);\n            },\n            secureTextEntry: flatTextSecureEntry,\n            right: _jsx(TextInput.Icon, {\n              icon: flatTextSecureEntry ? 'eye' : 'eye-off',\n              onPress: function onPress() {\n                return dispatch({\n                  type: 'flatTextSecureEntry',\n                  payload: !flatTextSecureEntry\n                });\n              },\n              forceTextInputFocus: false\n            })\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Outlined inputs\",\n          id: \"outlined\",\n          children: [_jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            label: \"Outlined input\",\n            placeholder: \"Type something\",\n            value: outlinedText,\n            onChangeText: function onChangeText(outlinedText) {\n              return inputActionHandler('outlinedText', outlinedText);\n            },\n            left: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: outlineLeftIcon,\n              onPress: function onPress() {\n                changeIconColor('outlineLeftIcon');\n              }\n            }),\n            maxLength: 100,\n            right: _jsx(TextInput.Affix, {\n              text: `${outlinedText.length}/100`\n            })\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: [styles.inputContainerStyle, styles.fontSize],\n            label: \"Outlined large font\",\n            placeholder: \"Type something\",\n            value: outlinedLargeText,\n            onChangeText: function onChangeText(outlinedLargeText) {\n              return inputActionHandler('outlinedLargeText', outlinedLargeText);\n            },\n            left: _jsx(TextInput.Affix, {\n              text: \"$\"\n            }),\n            right: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: outlineRightIcon,\n              onPress: function onPress() {\n                changeIconColor('outlineRightIcon');\n              }\n            })\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: [styles.inputContainerStyle, styles.fontSize],\n            label: _jsx(Text, {\n              style: styles.inputLabelText,\n              children: \"Custom label\"\n            }),\n            placeholder: \"Type something\",\n            value: outlinedCustomLabel,\n            onChangeText: function onChangeText(outlinedCustomLabel) {\n              return inputActionHandler('outlinedCustomLabel', outlinedCustomLabel);\n            }\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: [styles.inputContainerStyle, styles.fontSize],\n            label: \"Outlined large font\",\n            placeholder: \"Type something\",\n            value: outlinedTextPassword,\n            onChangeText: function onChangeText(outlinedTextPassword) {\n              return inputActionHandler('outlinedTextPassword', outlinedTextPassword);\n            },\n            secureTextEntry: outlineTextSecureEntry,\n            right: _jsx(TextInput.Icon, {\n              icon: outlineTextSecureEntry ? 'eye' : 'eye-off',\n              onPress: function onPress() {\n                return dispatch({\n                  type: 'outlineTextSecureEntry',\n                  payload: !outlineTextSecureEntry\n                });\n              }\n            })\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Disabled inputs\",\n          id: \"disabled\",\n          children: [_jsx(TextInput, {\n            disabled: true,\n            style: styles.inputContainerStyle,\n            label: \"Disabled flat input\"\n          }), _jsx(TextInput, {\n            disabled: true,\n            style: styles.inputContainerStyle,\n            label: \"Disabled flat input with value\",\n            value: \"Disabled flat input value\"\n          }), _jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input\",\n            disabled: true,\n            value: \"Disabled flat input with adornments\",\n            left: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: flatLeftIcon,\n              onPress: function onPress() {\n                changeIconColor('flatLeftIcon');\n              }\n            }),\n            right: _jsx(TextInput.Affix, {\n              text: \"/100\"\n            })\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            disabled: true,\n            style: styles.inputContainerStyle,\n            label: \"Disabled outlined input\"\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            disabled: true,\n            style: styles.inputContainerStyle,\n            label: \"Disabled outlined input\",\n            value: \"Disabled outlined input with value\"\n          }), _jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input\",\n            disabled: true,\n            mode: \"outlined\",\n            value: \"Disabled flat input with adornments\",\n            left: _jsx(TextInput.Icon, {\n              icon: \"magnify\",\n              color: flatLeftIcon,\n              onPress: function onPress() {\n                changeIconColor('flatLeftIcon');\n              }\n            }),\n            right: _jsx(TextInput.Affix, {\n              text: \"/100\"\n            })\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Dense inputs\",\n          id: \"dense\",\n          children: [_jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            dense: true,\n            label: \"Dense flat input\",\n            placeholder: \"Type something\",\n            value: flatDenseText,\n            onChangeText: function onChangeText(flatDenseText) {\n              return inputActionHandler('flatDenseText', flatDenseText);\n            },\n            left: _jsx(TextInput.Affix, {\n              text: \"#\"\n            }),\n            right: _jsx(TextInput.Icon, {\n              icon: \"chevron-up\",\n              color: function color(focused) {\n                var _theme$colors2;\n                return focused ? (_theme$colors2 = theme.colors) == null ? void 0 : _theme$colors2.primary : undefined;\n              }\n            })\n          }), _jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            dense: true,\n            placeholder: \"Dense flat input without label\",\n            value: flatDense,\n            onChangeText: function onChangeText(flatDense) {\n              return inputActionHandler('flatDense', flatDense);\n            }\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            dense: true,\n            label: \"Dense outlined input\",\n            placeholder: \"Type something\",\n            value: outlinedDenseText,\n            onChangeText: function onChangeText(outlinedDenseText) {\n              return inputActionHandler('outlinedDenseText', outlinedDenseText);\n            },\n            left: _jsx(TextInput.Affix, {\n              text: \"$\"\n            })\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            dense: true,\n            placeholder: \"Dense outlined input without label\",\n            value: outlinedDense,\n            onChangeText: function onChangeText(outlinedDense) {\n              return inputActionHandler('outlinedDense', outlinedDense);\n            }\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Multiline inputs\",\n          id: \"multiline\",\n          children: [_jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input multiline\",\n            multiline: true,\n            placeholder: \"Type something\",\n            value: flatMultiline,\n            onChangeText: function onChangeText(flatMultiline) {\n              return inputActionHandler('flatMultiline', flatMultiline);\n            }\n          }), _jsx(TextInput, {\n            style: [styles.inputContainerStyle, styles.textArea],\n            label: \"Flat input text area\",\n            multiline: true,\n            placeholder: \"Type something\",\n            value: flatTextArea,\n            onChangeText: function onChangeText(flatTextArea) {\n              return inputActionHandler('flatTextArea', flatTextArea);\n            }\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"flat\",\n              label: \"Flat multiline text input with fixed height\",\n              multiline: true,\n              style: styles.fixedHeight\n            })\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            label: \"Outlined input multiline\",\n            multiline: true,\n            placeholder: \"Type something\",\n            value: outlinedMultiline,\n            onChangeText: function onChangeText(outlinedMultiline) {\n              return inputActionHandler('outlinedMultiline', outlinedMultiline);\n            }\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: [styles.inputContainerStyle, styles.textArea],\n            label: \"Outlined input text area\",\n            multiline: true,\n            placeholder: \"Type something\",\n            value: outlinedTextArea,\n            onChangeText: function onChangeText(outlinedTextArea) {\n              return inputActionHandler('outlinedTextArea', outlinedTextArea);\n            }\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Outlined multiline text input with fixed height\",\n              multiline: true,\n              style: styles.fixedHeight\n            })\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Inputs with helpers\",\n          id: \"withAddons\",\n          children: [_jsxs(View, {\n            style: styles.inputContainerStyle,\n            children: [_jsx(TextInput, {\n              label: \"Input with helper text\",\n              placeholder: \"Enter username, only letters\",\n              value: name,\n              error: !_isUsernameValid(name),\n              onChangeText: function onChangeText(name) {\n                return inputActionHandler('name', name);\n              }\n            }), _jsx(HelperText, {\n              type: \"error\",\n              visible: !_isUsernameValid(name),\n              children: \"Error: Only letters are allowed\"\n            })]\n          }), _jsxs(View, {\n            style: styles.inputContainerStyle,\n            children: [_jsx(TextInput, {\n              label: \"Input with helper text and character counter\",\n              placeholder: \"Enter username, only letters\",\n              value: maxLengthName,\n              error: !_isUsernameValid(maxLengthName),\n              onChangeText: function onChangeText(maxLengthName) {\n                return inputActionHandler('maxLengthName', maxLengthName);\n              },\n              maxLength: MAX_LENGTH\n            }), _jsxs(View, {\n              style: styles.helpersWrapper,\n              children: [_jsx(HelperText, {\n                type: \"error\",\n                visible: !_isUsernameValid(maxLengthName),\n                style: styles.helper,\n                children: \"Error: Numbers and special characters are not allowed\"\n              }), _jsxs(HelperText, {\n                type: \"info\",\n                visible: true,\n                style: styles.counterHelper,\n                children: [maxLengthName.length, \" / \", MAX_LENGTH]\n              })]\n            })]\n          }), _jsxs(View, {\n            style: styles.inputContainerStyle,\n            children: [_jsx(TextInput, {\n              label: _jsxs(Text, {\n                children: [_jsx(Text, {\n                  style: {\n                    color: theme.isV3 ? MD3Colors.error50 : MD2Colors.red500\n                  },\n                  children: \"*\"\n                }), ' ', \"Label as component\"]\n              }),\n              style: styles.noPaddingInput,\n              placeholder: \"Enter username, required\",\n              value: nameRequired,\n              error: !nameRequired,\n              onChangeText: function onChangeText(nameRequired) {\n                return inputActionHandler('nameRequired', nameRequired);\n              }\n            }), _jsx(HelperText, {\n              type: \"error\",\n              padding: \"none\",\n              visible: !nameRequired,\n              children: \"Error: Username is required\"\n            })]\n          })]\n        }), _jsxs(List.Accordion, {\n          title: \"Custom inputs\",\n          id: \"custom\",\n          children: [_jsx(TextInput, {\n            style: styles.inputContainerStyle,\n            label: \"Flat input with custom underline colors\",\n            placeholder: \"Type something\",\n            value: flatUnderlineColors,\n            onChangeText: function onChangeText(flatUnderlineColors) {\n              return inputActionHandler('flatUnderlineColors', flatUnderlineColors);\n            },\n            underlineColor: theme.isV3 ? MD3Colors.primary70 : MD2Colors.pink400,\n            activeUnderlineColor: theme.isV3 ? MD3Colors.tertiary50 : MD2Colors.amber900\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            label: \"Outlined input with custom outline colors\",\n            placeholder: \"Type something\",\n            value: outlinedColors,\n            onChangeText: function onChangeText(outlinedColors) {\n              return inputActionHandler('outlinedColors', outlinedColors);\n            },\n            outlineColor: theme.isV3 ? MD3Colors.primary70 : MD2Colors.pink400,\n            activeOutlineColor: theme.isV3 ? MD3Colors.tertiary50 : MD2Colors.amber900\n          }), _jsx(TextInput, {\n            mode: \"outlined\",\n            style: styles.inputContainerStyle,\n            label: \"Outlined with super long label which is truncating at some point\",\n            placeholder: \"Type something\",\n            onChangeText: function onChangeText(outlinedLongLabel) {\n              return inputActionHandler('outlinedLongLabel', outlinedLongLabel);\n            }\n          }), _jsx(TextInput, {\n            mode: \"flat\",\n            style: styles.inputContainerStyle,\n            label: \"Custom style input\",\n            placeholder: \"Input with custom style\",\n            value: customStyleText,\n            onChangeText: function onChangeText(customStyleText) {\n              return inputActionHandler('customStyleText', customStyleText);\n            },\n            contentStyle: styles.inputContentStyle\n          }), _jsxs(View, {\n            style: styles.inputContainerStyle,\n            children: [_jsx(TextInput, {\n              label: \"Input with no padding\",\n              style: styles.noPaddingInput,\n              placeholder: \"Enter username, only letters\",\n              value: nameNoPadding,\n              error: !_isUsernameValid(nameNoPadding),\n              onChangeText: function onChangeText(nameNoPadding) {\n                return inputActionHandler('nameNoPadding', nameNoPadding);\n              }\n            }), _jsx(HelperText, {\n              type: \"error\",\n              padding: \"none\",\n              visible: !_isUsernameValid(nameNoPadding),\n              children: \"Error: Only letters are allowed\"\n            })]\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              label: \"Input with text align center\",\n              style: styles.centeredText,\n              activeUnderlineColor: \"transparent\"\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Outlined input with text align center\",\n              style: styles.centeredText\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              theme: {\n                roundness: 25\n              },\n              label: \"Outlined text input with custom roundness\"\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Outlined text input without roundness\",\n              theme: {\n                roundness: 0\n              }\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Outlined text input with error\",\n              error: true\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              placeholder: \"Outlined without label\"\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Outlined input with custom cursor and selection colors\",\n              selectionColor: 'rgba(0,255,1,0.5)',\n              cursorColor: 'rgba(255,1,1,1)',\n              placeholderTextColor: 'rgba(255,0,125,1)',\n              placeholder: \"Custom colors\"\n            })\n          }), _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              label: \"Flat input with custom cursor and selection colors\",\n              selectionColor: 'rgba(0,255,1,0.5)',\n              cursorColor: 'rgba(255,1,1,1)',\n              placeholderTextColor: 'rgba(255,0,125,1)',\n              placeholder: \"Custom colors\"\n            })\n          }), fontsLoaded && theme.isV3 ? _jsx(View, {\n            style: styles.inputContainerStyle,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Text input with custom font\",\n              placeholder: \"Custom font\",\n              style: styles.fontSize,\n              theme: {\n                fonts: configureFonts({\n                  config: {\n                    fontFamily: 'Abel'\n                  }\n                })\n              }\n            })\n          }) : null, _jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"CVV\",\n              placeholder: \"CVV\",\n              keyboardType: \"phone-pad\",\n              maxLength: 3\n            })\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              mode: \"flat\",\n              label: \"CVV\",\n              placeholder: \"CVV\",\n              keyboardType: \"phone-pad\",\n              maxLength: 3\n            })\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              mode: \"outlined\",\n              label: \"Code\",\n              placeholder: \"Code\",\n              keyboardType: \"phone-pad\",\n              maxLength: 4\n            })\n          }), _jsx(View, {\n            style: styles.row,\n            children: _jsx(TextInput, {\n              mode: \"flat\",\n              label: \"Code\",\n              placeholder: \"Code\",\n              keyboardType: \"phone-pad\",\n              maxLength: 4\n            })\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsx(TextInput, {\n              mode: \"flat\",\n              label: \"Month\",\n              placeholder: \"Month\",\n              style: styles.month\n            }), _jsx(TextInput, {\n              mode: \"flat\",\n              label: \"Year\",\n              placeholder: \"Year\",\n              keyboardType: \"phone-pad\",\n              style: styles.year\n            })]\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsx(View, {\n              style: styles.left,\n              children: _jsx(TextInput, {\n                mode: \"flat\",\n                label: \"Month of the car registration (optional)\",\n                placeholder: \"Month\",\n                style: styles.month\n              })\n            }), _jsx(View, {\n              style: styles.right,\n              children: _jsx(TextInput, {\n                mode: \"flat\",\n                label: \"Year of the car registration (optional)\",\n                placeholder: \"Year\",\n                keyboardType: \"phone-pad\",\n                style: styles.year,\n                left: _jsx(TextInput.Icon, {\n                  icon: \"calendar\"\n                })\n              })\n            })]\n          }), _jsxs(View, {\n            style: styles.row,\n            children: [_jsx(View, {\n              style: styles.left,\n              children: _jsx(TextInput, {\n                mode: \"outlined\",\n                label: \"Month of the car registration (optional)\",\n                placeholder: \"Month\",\n                style: styles.month\n              })\n            }), _jsx(View, {\n              style: styles.right,\n              children: _jsx(TextInput, {\n                mode: \"outlined\",\n                label: \"Year of the car registration (optional)\",\n                placeholder: \"Year\",\n                keyboardType: \"phone-pad\",\n                style: styles.year,\n                right: _jsx(TextInput.Icon, {\n                  icon: \"calendar\"\n                })\n              })\n            })]\n          })]\n        })]\n      })\n    })\n  });\n};\nTextInputExample.title = 'TextInput';\nvar styles = StyleSheet.create({\n  helpersWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  wrapper: {\n    flex: 1\n  },\n  helper: {\n    flexShrink: 1\n  },\n  counterHelper: {\n    textAlign: 'right'\n  },\n  inputContainerStyle: {\n    margin: 8\n  },\n  inputContentStyle: {\n    paddingLeft: 50,\n    fontWeight: 'bold',\n    fontStyle: 'italic'\n  },\n  fontSize: {\n    fontSize: 32\n  },\n  textArea: {\n    height: 80\n  },\n  noPaddingInput: {\n    backgroundColor: 'transparent',\n    paddingHorizontal: 0\n  },\n  centeredText: {\n    textAlign: 'center'\n  },\n  fixedHeight: {\n    height: 100\n  },\n  row: {\n    margin: 8,\n    justifyContent: 'space-between',\n    flexDirection: 'row'\n  },\n  month: {\n    flex: 1,\n    marginRight: 4\n  },\n  year: {\n    flex: 1,\n    marginLeft: 4\n  },\n  inputLabelText: {\n    color: MD3Colors.tertiary70\n  },\n  left: {\n    width: '30%'\n  },\n  right: {\n    width: '70%'\n  }\n});\nexport default TextInputExample;","map":{"version":3,"names":["React","KeyboardAvoidingView","Platform","StyleSheet","Text","View","useFonts","configureFonts","HelperText","List","MD2Colors","MD3Colors","TextInput","Icon","useExampleTheme","inputReducer","ScreenWrapper","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MAX_LENGTH","initialState","text","customIconText","name","outlinedText","largeText","flatTextPassword","outlinedLargeText","outlinedCustomLabel","outlinedTextPassword","nameNoPadding","customStyleText","nameRequired","flatDenseText","flatDense","outlinedDenseText","outlinedDense","flatMultiline","flatTextArea","flatUnderlineColors","outlinedMultiline","outlinedTextArea","outlinedColors","outlinedLongLabel","maxLengthName","flatTextSecureEntry","outlineTextSecureEntry","iconsColor","flatLeftIcon","undefined","flatRightIcon","outlineLeftIcon","outlineRightIcon","customIcon","TextInputAvoidingView","_ref","children","OS","style","styles","wrapper","behavior","keyboardVerticalOffset","TextInputExample","_React$useReducer","useReducer","_React$useReducer2","_slicedToArray","state","dispatch","_state$iconsColor","_isUsernameValid","test","theme","inputActionHandler","type","payload","changeIconColor","_theme$colors","color","newColors","_objectSpread","_defineProperty","isV3","colors","primary","accent","_useFonts","Abel","require","_useFonts2","fontsLoaded","_React$useState","useState","_React$useState2","expandedId","setExpandedId","onAccordionPress","id","keyboardShouldPersistTaps","removeClippedSubviews","AccordionGroup","Accordion","title","inputContainerStyle","label","placeholder","value","onChangeText","left","icon","onPress","maxLength","right","Affix","length","size","fontSize","secureTextEntry","forceTextInputFocus","mode","inputLabelText","disabled","dense","focused","_theme$colors2","multiline","textArea","fixedHeight","error","visible","helpersWrapper","helper","counterHelper","error50","red500","noPaddingInput","padding","underlineColor","primary70","pink400","activeUnderlineColor","tertiary50","amber900","outlineColor","activeOutlineColor","contentStyle","inputContentStyle","centeredText","roundness","selectionColor","cursorColor","placeholderTextColor","fonts","config","fontFamily","row","keyboardType","month","year","create","flexDirection","justifyContent","flex","flexShrink","textAlign","margin","paddingLeft","fontWeight","fontStyle","height","backgroundColor","paddingHorizontal","marginRight","marginLeft","tertiary70","width"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/Examples/TextInputExample.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n} from 'react-native';\r\n\r\nimport { useFonts } from 'expo-font';\r\nimport {\r\n  configureFonts,\r\n  HelperText,\r\n  List,\r\n  MD2Colors,\r\n  MD3Colors,\r\n  TextInput,\r\n} from 'react-native-paper';\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\n\r\nimport { useExampleTheme } from '../index';\r\nimport { inputReducer, State } from '../../utils';\r\nimport ScreenWrapper from '../ScreenWrapper';\r\n\r\nconst MAX_LENGTH = 20;\r\n\r\nconst initialState: State = {\r\n  text: '',\r\n  customIconText: '',\r\n  name: '',\r\n  outlinedText: '',\r\n  largeText: '',\r\n  flatTextPassword: 'Password',\r\n  outlinedLargeText: '',\r\n  outlinedCustomLabel: '',\r\n  outlinedTextPassword: '',\r\n  nameNoPadding: '',\r\n  customStyleText: '',\r\n  nameRequired: '',\r\n  flatDenseText: '',\r\n  flatDense: '',\r\n  outlinedDenseText: '',\r\n  outlinedDense: '',\r\n  flatMultiline: '',\r\n  flatTextArea: '',\r\n  flatUnderlineColors: '',\r\n  outlinedMultiline: '',\r\n  outlinedTextArea: '',\r\n  outlinedColors: '',\r\n  outlinedLongLabel: '',\r\n  maxLengthName: '',\r\n  flatTextSecureEntry: true,\r\n  outlineTextSecureEntry: true,\r\n  iconsColor: {\r\n    flatLeftIcon: undefined,\r\n    flatRightIcon: undefined,\r\n    outlineLeftIcon: undefined,\r\n    outlineRightIcon: undefined,\r\n    customIcon: undefined,\r\n  },\r\n};\r\n\r\ntype AvoidingViewProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\ntype ExpandedId = string | number | undefined;\r\n\r\nconst TextInputAvoidingView = ({ children }: AvoidingViewProps) => {\r\n  return Platform.OS === 'ios' ? (\r\n    <KeyboardAvoidingView\r\n      style={styles.wrapper}\r\n      behavior=\"padding\"\r\n      keyboardVerticalOffset={80}\r\n    >\r\n      {children}\r\n    </KeyboardAvoidingView>\r\n  ) : (\r\n    <>{children}</>\r\n  );\r\n};\r\n\r\nconst TextInputExample = () => {\r\n  const [state, dispatch] = React.useReducer(inputReducer, initialState);\r\n  const {\r\n    text,\r\n    customIconText,\r\n    name,\r\n    outlinedText,\r\n    largeText,\r\n    flatTextPassword,\r\n    outlinedLargeText,\r\n    outlinedCustomLabel,\r\n    outlinedTextPassword,\r\n    nameNoPadding,\r\n    customStyleText,\r\n    nameRequired,\r\n    flatDenseText,\r\n    flatDense,\r\n    outlinedDenseText,\r\n    outlinedDense,\r\n    flatMultiline,\r\n    flatTextArea,\r\n    flatUnderlineColors,\r\n    outlinedMultiline,\r\n    outlinedTextArea,\r\n    outlinedColors,\r\n    maxLengthName,\r\n    flatTextSecureEntry,\r\n    outlineTextSecureEntry,\r\n    iconsColor: {\r\n      flatLeftIcon,\r\n      flatRightIcon,\r\n      outlineLeftIcon,\r\n      outlineRightIcon,\r\n      customIcon,\r\n    },\r\n  } = state;\r\n\r\n  const _isUsernameValid = (name: string) => /^[a-zA-Z]*$/.test(name);\r\n\r\n  const theme = useExampleTheme();\r\n\r\n  const inputActionHandler = (type: keyof State, payload: string) =>\r\n    dispatch({\r\n      type: type,\r\n      payload: payload,\r\n    });\r\n\r\n  const changeIconColor = (name: keyof State['iconsColor']) => {\r\n    const color = state.iconsColor[name];\r\n\r\n    const newColors = {\r\n      ...state.iconsColor,\r\n      [name]: !color\r\n        ? theme.isV3\r\n          ? theme.colors.primary\r\n          : theme.colors?.accent\r\n        : undefined,\r\n    };\r\n\r\n    dispatch({\r\n      type: 'iconsColor',\r\n      payload: newColors,\r\n    });\r\n  };\r\n\r\n  const [fontsLoaded] = useFonts({\r\n    Abel: require('../../assets/fonts/Abel-Regular.ttf'),\r\n  });\r\n\r\n  const [expandedId, setExpandedId] = React.useState<ExpandedId>('flat');\r\n\r\n  const onAccordionPress = (id: string | number) =>\r\n    setExpandedId(expandedId === id ? undefined : id);\r\n\r\n  return (\r\n    <TextInputAvoidingView>\r\n      <ScreenWrapper\r\n        keyboardShouldPersistTaps={'always'}\r\n        removeClippedSubviews={false}\r\n      >\r\n        <List.AccordionGroup\r\n          expandedId={expandedId}\r\n          onAccordionPress={onAccordionPress}\r\n        >\r\n          <List.Accordion title=\"Flat inputs\" id=\"flat\">\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input\"\r\n              placeholder=\"Type something\"\r\n              value={text}\r\n              onChangeText={(text) => inputActionHandler('text', text)}\r\n              left={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={flatLeftIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('flatLeftIcon');\r\n                  }}\r\n                />\r\n              }\r\n              maxLength={100}\r\n              right={<TextInput.Affix text={`${text.length}/100`} />}\r\n            />\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input with custom icon\"\r\n              placeholder=\"Type something\"\r\n              value={customIconText}\r\n              onChangeText={(text) =>\r\n                inputActionHandler('customIconText', text)\r\n              }\r\n              maxLength={100}\r\n              right={<TextInput.Affix text={`${customIconText.length}/100`} />}\r\n              left={\r\n                <TextInput.Icon\r\n                  icon={() => (\r\n                    <Icon\r\n                      name=\"home\"\r\n                      size={24}\r\n                      color={customIcon}\r\n                      onPress={() => {\r\n                        changeIconColor('customIcon');\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              }\r\n            />\r\n            <TextInput\r\n              style={[styles.inputContainerStyle, styles.fontSize]}\r\n              label=\"Flat input large font\"\r\n              placeholder=\"Type something\"\r\n              value={largeText}\r\n              onChangeText={(largeText) =>\r\n                inputActionHandler('largeText', largeText)\r\n              }\r\n              left={<TextInput.Affix text=\"#\" />}\r\n              right={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={flatRightIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('flatRightIcon');\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n            <TextInput\r\n              style={[styles.inputContainerStyle, styles.fontSize]}\r\n              label=\"Flat input large font\"\r\n              placeholder=\"Type something\"\r\n              value={flatTextPassword}\r\n              onChangeText={(flatTextPassword) =>\r\n                inputActionHandler('flatTextPassword', flatTextPassword)\r\n              }\r\n              secureTextEntry={flatTextSecureEntry}\r\n              right={\r\n                <TextInput.Icon\r\n                  icon={flatTextSecureEntry ? 'eye' : 'eye-off'}\r\n                  onPress={() =>\r\n                    dispatch({\r\n                      type: 'flatTextSecureEntry',\r\n                      payload: !flatTextSecureEntry,\r\n                    })\r\n                  }\r\n                  forceTextInputFocus={false}\r\n                />\r\n              }\r\n            />\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Outlined inputs\" id=\"outlined\">\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              label=\"Outlined input\"\r\n              placeholder=\"Type something\"\r\n              value={outlinedText}\r\n              onChangeText={(outlinedText) =>\r\n                inputActionHandler('outlinedText', outlinedText)\r\n              }\r\n              left={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={outlineLeftIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('outlineLeftIcon');\r\n                  }}\r\n                />\r\n              }\r\n              maxLength={100}\r\n              right={<TextInput.Affix text={`${outlinedText.length}/100`} />}\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={[styles.inputContainerStyle, styles.fontSize]}\r\n              label=\"Outlined large font\"\r\n              placeholder=\"Type something\"\r\n              value={outlinedLargeText}\r\n              onChangeText={(outlinedLargeText) =>\r\n                inputActionHandler('outlinedLargeText', outlinedLargeText)\r\n              }\r\n              left={<TextInput.Affix text=\"$\" />}\r\n              right={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={outlineRightIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('outlineRightIcon');\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={[styles.inputContainerStyle, styles.fontSize]}\r\n              label={<Text style={styles.inputLabelText}>Custom label</Text>}\r\n              placeholder=\"Type something\"\r\n              value={outlinedCustomLabel}\r\n              onChangeText={(outlinedCustomLabel) =>\r\n                inputActionHandler('outlinedCustomLabel', outlinedCustomLabel)\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={[styles.inputContainerStyle, styles.fontSize]}\r\n              label=\"Outlined large font\"\r\n              placeholder=\"Type something\"\r\n              value={outlinedTextPassword}\r\n              onChangeText={(outlinedTextPassword) =>\r\n                inputActionHandler('outlinedTextPassword', outlinedTextPassword)\r\n              }\r\n              secureTextEntry={outlineTextSecureEntry}\r\n              right={\r\n                <TextInput.Icon\r\n                  icon={outlineTextSecureEntry ? 'eye' : 'eye-off'}\r\n                  onPress={() =>\r\n                    dispatch({\r\n                      type: 'outlineTextSecureEntry',\r\n                      payload: !outlineTextSecureEntry,\r\n                    })\r\n                  }\r\n                />\r\n              }\r\n            />\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Disabled inputs\" id=\"disabled\">\r\n            <TextInput\r\n              disabled\r\n              style={styles.inputContainerStyle}\r\n              label=\"Disabled flat input\"\r\n            />\r\n            <TextInput\r\n              disabled\r\n              style={styles.inputContainerStyle}\r\n              label=\"Disabled flat input with value\"\r\n              value=\"Disabled flat input value\"\r\n            />\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input\"\r\n              disabled\r\n              value=\"Disabled flat input with adornments\"\r\n              left={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={flatLeftIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('flatLeftIcon');\r\n                  }}\r\n                />\r\n              }\r\n              right={<TextInput.Affix text=\"/100\" />}\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              disabled\r\n              style={styles.inputContainerStyle}\r\n              label=\"Disabled outlined input\"\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              disabled\r\n              style={styles.inputContainerStyle}\r\n              label=\"Disabled outlined input\"\r\n              value=\"Disabled outlined input with value\"\r\n            />\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input\"\r\n              disabled\r\n              mode=\"outlined\"\r\n              value=\"Disabled flat input with adornments\"\r\n              left={\r\n                <TextInput.Icon\r\n                  icon=\"magnify\"\r\n                  color={flatLeftIcon}\r\n                  onPress={() => {\r\n                    changeIconColor('flatLeftIcon');\r\n                  }}\r\n                />\r\n              }\r\n              right={<TextInput.Affix text=\"/100\" />}\r\n            />\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Dense inputs\" id=\"dense\">\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              dense\r\n              label=\"Dense flat input\"\r\n              placeholder=\"Type something\"\r\n              value={flatDenseText}\r\n              onChangeText={(flatDenseText) =>\r\n                inputActionHandler('flatDenseText', flatDenseText)\r\n              }\r\n              left={<TextInput.Affix text=\"#\" />}\r\n              right={\r\n                <TextInput.Icon\r\n                  icon=\"chevron-up\"\r\n                  color={(focused) =>\r\n                    focused ? theme.colors?.primary : undefined\r\n                  }\r\n                />\r\n              }\r\n            />\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              dense\r\n              placeholder=\"Dense flat input without label\"\r\n              value={flatDense}\r\n              onChangeText={(flatDense) =>\r\n                inputActionHandler('flatDense', flatDense)\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              dense\r\n              label=\"Dense outlined input\"\r\n              placeholder=\"Type something\"\r\n              value={outlinedDenseText}\r\n              onChangeText={(outlinedDenseText) =>\r\n                inputActionHandler('outlinedDenseText', outlinedDenseText)\r\n              }\r\n              left={<TextInput.Affix text=\"$\" />}\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              dense\r\n              placeholder=\"Dense outlined input without label\"\r\n              value={outlinedDense}\r\n              onChangeText={(outlinedDense) =>\r\n                inputActionHandler('outlinedDense', outlinedDense)\r\n              }\r\n            />\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Multiline inputs\" id=\"multiline\">\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input multiline\"\r\n              multiline\r\n              placeholder=\"Type something\"\r\n              value={flatMultiline}\r\n              onChangeText={(flatMultiline) =>\r\n                inputActionHandler('flatMultiline', flatMultiline)\r\n              }\r\n            />\r\n            <TextInput\r\n              style={[styles.inputContainerStyle, styles.textArea]}\r\n              label=\"Flat input text area\"\r\n              multiline\r\n              placeholder=\"Type something\"\r\n              value={flatTextArea}\r\n              onChangeText={(flatTextArea) =>\r\n                inputActionHandler('flatTextArea', flatTextArea)\r\n              }\r\n            />\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"flat\"\r\n                label=\"Flat multiline text input with fixed height\"\r\n                multiline\r\n                style={styles.fixedHeight}\r\n              />\r\n            </View>\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              label=\"Outlined input multiline\"\r\n              multiline\r\n              placeholder=\"Type something\"\r\n              value={outlinedMultiline}\r\n              onChangeText={(outlinedMultiline) =>\r\n                inputActionHandler('outlinedMultiline', outlinedMultiline)\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={[styles.inputContainerStyle, styles.textArea]}\r\n              label=\"Outlined input text area\"\r\n              multiline\r\n              placeholder=\"Type something\"\r\n              value={outlinedTextArea}\r\n              onChangeText={(outlinedTextArea) =>\r\n                inputActionHandler('outlinedTextArea', outlinedTextArea)\r\n              }\r\n            />\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Outlined multiline text input with fixed height\"\r\n                multiline\r\n                style={styles.fixedHeight}\r\n              />\r\n            </View>\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Inputs with helpers\" id=\"withAddons\">\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label=\"Input with helper text\"\r\n                placeholder=\"Enter username, only letters\"\r\n                value={name}\r\n                error={!_isUsernameValid(name)}\r\n                onChangeText={(name) => inputActionHandler('name', name)}\r\n              />\r\n              <HelperText type=\"error\" visible={!_isUsernameValid(name)}>\r\n                Error: Only letters are allowed\r\n              </HelperText>\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label=\"Input with helper text and character counter\"\r\n                placeholder=\"Enter username, only letters\"\r\n                value={maxLengthName}\r\n                error={!_isUsernameValid(maxLengthName)}\r\n                onChangeText={(maxLengthName) =>\r\n                  inputActionHandler('maxLengthName', maxLengthName)\r\n                }\r\n                maxLength={MAX_LENGTH}\r\n              />\r\n              <View style={styles.helpersWrapper}>\r\n                <HelperText\r\n                  type=\"error\"\r\n                  visible={!_isUsernameValid(maxLengthName)}\r\n                  style={styles.helper}\r\n                >\r\n                  Error: Numbers and special characters are not allowed\r\n                </HelperText>\r\n                <HelperText type=\"info\" visible style={styles.counterHelper}>\r\n                  {maxLengthName.length} / {MAX_LENGTH}\r\n                </HelperText>\r\n              </View>\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label={\r\n                  <Text>\r\n                    <Text\r\n                      style={{\r\n                        color: theme.isV3\r\n                          ? MD3Colors.error50\r\n                          : MD2Colors.red500,\r\n                      }}\r\n                    >\r\n                      *\r\n                    </Text>{' '}\r\n                    Label as component\r\n                  </Text>\r\n                }\r\n                style={styles.noPaddingInput}\r\n                placeholder=\"Enter username, required\"\r\n                value={nameRequired}\r\n                error={!nameRequired}\r\n                onChangeText={(nameRequired) =>\r\n                  inputActionHandler('nameRequired', nameRequired)\r\n                }\r\n              />\r\n              <HelperText type=\"error\" padding=\"none\" visible={!nameRequired}>\r\n                Error: Username is required\r\n              </HelperText>\r\n            </View>\r\n          </List.Accordion>\r\n          <List.Accordion title=\"Custom inputs\" id=\"custom\">\r\n            <TextInput\r\n              style={styles.inputContainerStyle}\r\n              label=\"Flat input with custom underline colors\"\r\n              placeholder=\"Type something\"\r\n              value={flatUnderlineColors}\r\n              onChangeText={(flatUnderlineColors) =>\r\n                inputActionHandler('flatUnderlineColors', flatUnderlineColors)\r\n              }\r\n              underlineColor={\r\n                theme.isV3 ? MD3Colors.primary70 : MD2Colors.pink400\r\n              }\r\n              activeUnderlineColor={\r\n                theme.isV3 ? MD3Colors.tertiary50 : MD2Colors.amber900\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              label=\"Outlined input with custom outline colors\"\r\n              placeholder=\"Type something\"\r\n              value={outlinedColors}\r\n              onChangeText={(outlinedColors) =>\r\n                inputActionHandler('outlinedColors', outlinedColors)\r\n              }\r\n              outlineColor={\r\n                theme.isV3 ? MD3Colors.primary70 : MD2Colors.pink400\r\n              }\r\n              activeOutlineColor={\r\n                theme.isV3 ? MD3Colors.tertiary50 : MD2Colors.amber900\r\n              }\r\n            />\r\n            <TextInput\r\n              mode=\"outlined\"\r\n              style={styles.inputContainerStyle}\r\n              label=\"Outlined with super long label which is truncating at some point\"\r\n              placeholder=\"Type something\"\r\n              onChangeText={(outlinedLongLabel) =>\r\n                inputActionHandler('outlinedLongLabel', outlinedLongLabel)\r\n              }\r\n            />\r\n\r\n            <TextInput\r\n              mode=\"flat\"\r\n              style={styles.inputContainerStyle}\r\n              label=\"Custom style input\"\r\n              placeholder=\"Input with custom style\"\r\n              value={customStyleText}\r\n              onChangeText={(customStyleText) =>\r\n                inputActionHandler('customStyleText', customStyleText)\r\n              }\r\n              contentStyle={styles.inputContentStyle}\r\n            />\r\n\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label=\"Input with no padding\"\r\n                style={styles.noPaddingInput}\r\n                placeholder=\"Enter username, only letters\"\r\n                value={nameNoPadding}\r\n                error={!_isUsernameValid(nameNoPadding)}\r\n                onChangeText={(nameNoPadding) =>\r\n                  inputActionHandler('nameNoPadding', nameNoPadding)\r\n                }\r\n              />\r\n              <HelperText\r\n                type=\"error\"\r\n                padding=\"none\"\r\n                visible={!_isUsernameValid(nameNoPadding)}\r\n              >\r\n                Error: Only letters are allowed\r\n              </HelperText>\r\n            </View>\r\n\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label=\"Input with text align center\"\r\n                style={styles.centeredText}\r\n                activeUnderlineColor=\"transparent\"\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Outlined input with text align center\"\r\n                style={styles.centeredText}\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                theme={{\r\n                  roundness: 25,\r\n                }}\r\n                label=\"Outlined text input with custom roundness\"\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Outlined text input without roundness\"\r\n                theme={{ roundness: 0 }}\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Outlined text input with error\"\r\n                error\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput mode=\"outlined\" placeholder=\"Outlined without label\" />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Outlined input with custom cursor and selection colors\"\r\n                selectionColor={'rgba(0,255,1,0.5)'}\r\n                cursorColor={'rgba(255,1,1,1)'}\r\n                placeholderTextColor={'rgba(255,0,125,1)'}\r\n                placeholder=\"Custom colors\"\r\n              />\r\n            </View>\r\n            <View style={styles.inputContainerStyle}>\r\n              <TextInput\r\n                label=\"Flat input with custom cursor and selection colors\"\r\n                selectionColor={'rgba(0,255,1,0.5)'}\r\n                cursorColor={'rgba(255,1,1,1)'}\r\n                placeholderTextColor={'rgba(255,0,125,1)'}\r\n                placeholder=\"Custom colors\"\r\n              />\r\n            </View>\r\n            {fontsLoaded && theme.isV3 ? (\r\n              <View style={styles.inputContainerStyle}>\r\n                <TextInput\r\n                  mode=\"outlined\"\r\n                  label=\"Text input with custom font\"\r\n                  placeholder=\"Custom font\"\r\n                  style={styles.fontSize}\r\n                  theme={{\r\n                    fonts: configureFonts({\r\n                      config: {\r\n                        fontFamily: 'Abel',\r\n                      },\r\n                    }),\r\n                  }}\r\n                />\r\n              </View>\r\n            ) : null}\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"CVV\"\r\n                placeholder=\"CVV\"\r\n                keyboardType=\"phone-pad\"\r\n                maxLength={3}\r\n              />\r\n            </View>\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                mode=\"flat\"\r\n                label=\"CVV\"\r\n                placeholder=\"CVV\"\r\n                keyboardType=\"phone-pad\"\r\n                maxLength={3}\r\n              />\r\n            </View>\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                mode=\"outlined\"\r\n                label=\"Code\"\r\n                placeholder=\"Code\"\r\n                keyboardType=\"phone-pad\"\r\n                maxLength={4}\r\n              />\r\n            </View>\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                mode=\"flat\"\r\n                label=\"Code\"\r\n                placeholder=\"Code\"\r\n                keyboardType=\"phone-pad\"\r\n                maxLength={4}\r\n              />\r\n            </View>\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                mode=\"flat\"\r\n                label=\"Month\"\r\n                placeholder=\"Month\"\r\n                style={styles.month}\r\n              />\r\n              <TextInput\r\n                mode=\"flat\"\r\n                label=\"Year\"\r\n                placeholder=\"Year\"\r\n                keyboardType=\"phone-pad\"\r\n                style={styles.year}\r\n              />\r\n            </View>\r\n            <View style={styles.row}>\r\n              <View style={styles.left}>\r\n                <TextInput\r\n                  mode=\"flat\"\r\n                  label=\"Month of the car registration (optional)\"\r\n                  placeholder=\"Month\"\r\n                  style={styles.month}\r\n                />\r\n              </View>\r\n              <View style={styles.right}>\r\n                <TextInput\r\n                  mode=\"flat\"\r\n                  label=\"Year of the car registration (optional)\"\r\n                  placeholder=\"Year\"\r\n                  keyboardType=\"phone-pad\"\r\n                  style={styles.year}\r\n                  left={<TextInput.Icon icon=\"calendar\" />}\r\n                />\r\n              </View>\r\n            </View>\r\n            <View style={styles.row}>\r\n              <View style={styles.left}>\r\n                <TextInput\r\n                  mode=\"outlined\"\r\n                  label=\"Month of the car registration (optional)\"\r\n                  placeholder=\"Month\"\r\n                  style={styles.month}\r\n                />\r\n              </View>\r\n              <View style={styles.right}>\r\n                <TextInput\r\n                  mode=\"outlined\"\r\n                  label=\"Year of the car registration (optional)\"\r\n                  placeholder=\"Year\"\r\n                  keyboardType=\"phone-pad\"\r\n                  style={styles.year}\r\n                  right={<TextInput.Icon icon=\"calendar\" />}\r\n                />\r\n              </View>\r\n            </View>\r\n          </List.Accordion>\r\n        </List.AccordionGroup>\r\n      </ScreenWrapper>\r\n    </TextInputAvoidingView>\r\n  );\r\n};\r\n\r\nTextInputExample.title = 'TextInput';\r\n\r\nconst styles = StyleSheet.create({\r\n  helpersWrapper: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  wrapper: {\r\n    flex: 1,\r\n  },\r\n  helper: {\r\n    flexShrink: 1,\r\n  },\r\n  counterHelper: {\r\n    textAlign: 'right',\r\n  },\r\n  inputContainerStyle: {\r\n    margin: 8,\r\n  },\r\n  inputContentStyle: {\r\n    paddingLeft: 50,\r\n    fontWeight: 'bold',\r\n    fontStyle: 'italic',\r\n  },\r\n  fontSize: {\r\n    fontSize: 32,\r\n  },\r\n  textArea: {\r\n    height: 80,\r\n  },\r\n  // eslint-disable-next-line react-native/no-color-literals\r\n  noPaddingInput: {\r\n    backgroundColor: 'transparent',\r\n    paddingHorizontal: 0,\r\n  },\r\n  centeredText: {\r\n    textAlign: 'center',\r\n  },\r\n  fixedHeight: {\r\n    height: 100,\r\n  },\r\n  row: {\r\n    margin: 8,\r\n    justifyContent: 'space-between',\r\n    flexDirection: 'row',\r\n  },\r\n  month: {\r\n    flex: 1,\r\n    marginRight: 4,\r\n  },\r\n  year: {\r\n    flex: 1,\r\n    marginLeft: 4,\r\n  },\r\n  inputLabelText: {\r\n    color: MD3Colors.tertiary70,\r\n  },\r\n  left: {\r\n    width: '30%',\r\n  },\r\n  right: {\r\n    width: '70%',\r\n  },\r\n});\r\n\r\nexport default TextInputExample;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}