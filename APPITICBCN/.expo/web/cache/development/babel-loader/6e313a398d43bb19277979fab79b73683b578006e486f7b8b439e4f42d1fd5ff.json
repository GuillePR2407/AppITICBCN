{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar jwt = require('jsonwebtoken');\nfunction decodeToken(token) {\n  try {\n    var decoded = jwt.decode(token);\n    return decoded;\n  } catch (error) {\n    console.error(\"Error decoding token: \", error);\n    return null;\n  }\n}\nvar UserContext = createContext(undefined);\nexport var useUser = function useUser() {\n  var context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    userRole = _useState2[0],\n    setUserRole = _useState2[1];\n  var loadUserRoleFromStorage = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var token = yield AsyncStorage.getItem('userToken');\n      if (token) {\n        var decodedToken = decodeToken(token);\n        setUserRole(decodedToken.role);\n      }\n    });\n    return function loadUserRoleFromStorage() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadUserRoleFromStorage();\n  }, []);\n  return _jsx(UserContext.Provider, {\n    value: {\n      userRole: userRole,\n      setUserRole: setUserRole\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","jsx","_jsx","jwt","require","decodeToken","token","decoded","decode","error","console","UserContext","undefined","useUser","context","Error","UserProvider","_ref","children","_useState","_useState2","_slicedToArray","userRole","setUserRole","loadUserRoleFromStorage","_ref2","_asyncToGenerator","getItem","decodedToken","role","apply","arguments","Provider","value"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/context/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\nfunction decodeToken(token) {\r\n    try {\r\n        const decoded = jwt.decode(token);\r\n        return decoded;\r\n    } catch (error) {\r\n        console.error(\"Error decoding token: \", error);\r\n        return null;\r\n    }\r\n}\r\n\r\ntype UserRole = 0 | 1 | 2 | 3 | 4; // 0: Logout, 1: User 2: Alumno, 3: Profesor, 4: Admin\r\n\r\ninterface UserContextType {\r\n    userRole: UserRole;\r\n    setUserRole: (role: UserRole) => void;\r\n}\r\n\r\nconst UserContext = createContext<UserContextType | undefined>(undefined);\r\n\r\nexport const useUser = (): UserContextType => {\r\n    const context = useContext(UserContext);\r\n    if (!context) {\r\n        throw new Error('useUser must be used within a UserProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\ninterface UserProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\r\n    const [userRole, setUserRole] = useState<UserRole>(0);\r\n\r\n    const loadUserRoleFromStorage = async () => {\r\n        const token = await AsyncStorage.getItem('userToken');\r\n        if (token) {\r\n            // Aquí debes añadir la lógica para decodificar el token y determinar el rol del usuario\r\n            // Esto es solo un ejemplo, ajusta según tu esquema de autenticación\r\n            const decodedToken = decodeToken(token); // Esta función debe ser implementada para decodificar tu token JWT o similar\r\n            setUserRole(decodedToken.role);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadUserRoleFromStorage();\r\n    }, []);\r\n\r\n    return (\r\n        <UserContext.Provider value={{ userRole, setUserRole }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,OAAOC,YAAY,MAAM,2CAA2C;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAErE,IAAMC,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEnC,SAASC,WAAWA,CAACC,KAAK,EAAE;EACxB,IAAI;IACA,IAAMC,OAAO,GAAGJ,GAAG,CAACK,MAAM,CAACF,KAAK,CAAC;IACjC,OAAOC,OAAO;EAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACf;AACJ;AASA,IAAME,WAAW,GAAGf,aAAa,CAA8BgB,SAAS,CAAC;AAEzE,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAA0B;EAC1C,IAAMC,OAAO,GAAGjB,UAAU,CAACc,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOD,OAAO;AAClB,CAAC;AAMD,OAAO,IAAME,YAAyC,GAAG,SAA5CA,YAAyCA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAChE,IAAAC,SAAA,GAAgCrB,QAAQ,CAAW,CAAC,CAAC;IAAAsB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,uBAAuB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACxC,IAAMpB,KAAK,SAASN,YAAY,CAAC2B,OAAO,CAAC,WAAW,CAAC;MACrD,IAAIrB,KAAK,EAAE;QAGP,IAAMsB,YAAY,GAAGvB,WAAW,CAACC,KAAK,CAAC;QACvCiB,WAAW,CAACK,YAAY,CAACC,IAAI,CAAC;MAClC;IACJ,CAAC;IAAA,gBARKL,uBAAuBA,CAAA;MAAA,OAAAC,KAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;EAAA,GAQ5B;EAEDhC,SAAS,CAAC,YAAM;IACZyB,uBAAuB,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,OACItB,IAAA,CAACS,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEX,QAAQ,EAARA,QAAQ;MAAEC,WAAW,EAAXA;IAAY,CAAE;IAAAL,QAAA,EAClDA;EAAQ,CACS,CAAC;AAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}