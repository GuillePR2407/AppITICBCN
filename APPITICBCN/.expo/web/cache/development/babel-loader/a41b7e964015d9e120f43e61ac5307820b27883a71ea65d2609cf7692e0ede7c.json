{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from 'react-native-paper';\nimport { getAllUsers } from \"../adminService\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar UsersSection = function UsersSection() {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    users = _React$useState2[0],\n    setUsers = _React$useState2[1];\n  React.useEffect(function () {\n    getAllUsers().then(function (data) {\n      setUsers(data);\n    });\n  }, []);\n  return _jsx(ScrollView, {\n    style: {\n      padding: 20\n    },\n    children: users.map(function (user, index) {\n      return _jsxs(View, {\n        children: [_jsxs(Text, {\n          children: [\"Username: \", user.username]\n        }), _jsxs(Text, {\n          children: [\"Email: \", user.email]\n        }), _jsxs(Text, {\n          children: [\"Role: \", user.role.name]\n        })]\n      }, index);\n    })\n  });\n};\nexport default UsersSection;","map":{"version":3,"names":["React","ScrollView","View","Text","getAllUsers","jsxs","_jsxs","jsx","_jsx","UsersSection","_React$useState","useState","_React$useState2","_slicedToArray","users","setUsers","useEffect","then","data","style","padding","children","map","user","index","username","email","role","name"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/Sections/UsersSection.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { ScrollView, View } from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport { PreferencesContext } from '../index';\r\nimport { KeyboardTypeOptions } from 'react-native';\r\nimport { getAllUsers } from '../adminService'; // Importa el método getAllUsers\r\n\r\nconst UsersSection = () => {\r\n    const [users, setUsers] = React.useState([]); // Crea un estado para los usuarios\r\n\r\n    React.useEffect(() => {\r\n        // Cuando el componente se monta, obtén todos los usuarios\r\n        getAllUsers().then(data => {\r\n            setUsers(data); // Actualiza el estado con los datos de los usuarios\r\n        });\r\n    }, []); // El array vacío significa que este efecto se ejecuta solo una vez, cuando el componente se monta\r\n\r\n    return (\r\n        <ScrollView style={{ padding: 20 }}>\r\n            {users.map((user, index) => (\r\n                <View key={index}>\r\n                    <Text>Username: {user.username}</Text>\r\n                    <Text>Email: {user.email}</Text>\r\n                    <Text>Role: {user.role.name}</Text>\r\n                </View>\r\n            ))}\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nexport default UsersSection;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAE/B,SAASC,IAAI,QAAQ,oBAAoB;AAGzC,SAASC,WAAW;AAA0B,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAE9C,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACvB,IAAAC,eAAA,GAA0BV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAArCI,KAAK,GAAAF,gBAAA;IAAEG,QAAQ,GAAAH,gBAAA;EAEtBZ,KAAK,CAACgB,SAAS,CAAC,YAAM;IAElBZ,WAAW,CAAC,CAAC,CAACa,IAAI,CAAC,UAAAC,IAAI,EAAI;MACvBH,QAAQ,CAACG,IAAI,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,OACIV,IAAA,CAACP,UAAU;IAACkB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,EAC9BP,KAAK,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;MAAA,OACnBlB,KAAA,CAACJ,IAAI;QAAAmB,QAAA,GACDf,KAAA,CAACH,IAAI;UAAAkB,QAAA,GAAC,YAAU,EAACE,IAAI,CAACE,QAAQ;QAAA,CAAO,CAAC,EACtCnB,KAAA,CAACH,IAAI;UAAAkB,QAAA,GAAC,SAAO,EAACE,IAAI,CAACG,KAAK;QAAA,CAAO,CAAC,EAChCpB,KAAA,CAACH,IAAI;UAAAkB,QAAA,GAAC,QAAM,EAACE,IAAI,CAACI,IAAI,CAACC,IAAI;QAAA,CAAO,CAAC;MAAA,GAH5BJ,KAIL,CAAC;IAAA,CACV;EAAC,CACM,CAAC;AAErB,CAAC;AAED,eAAef,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}