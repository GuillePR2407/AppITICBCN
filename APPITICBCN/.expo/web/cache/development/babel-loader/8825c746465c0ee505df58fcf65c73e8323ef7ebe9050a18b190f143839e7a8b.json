{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput, Button } from 'react-native-paper';\nimport { useExampleTheme } from \"./index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Login = function Login() {\n  var theme = useExampleTheme();\n  var height = theme.isV3 ? 80 : 56;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    userName = _useState2[0],\n    setUserName = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function handleLogin() {\n    console.log('Username:', userName);\n    console.log('Password:', password);\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center'\n    },\n    children: _jsxs(View, {\n      style: {\n        width: '80%',\n        alignSelf: 'center'\n      },\n      children: [_jsx(TextInput, {\n        label: \"Email\",\n        value: userName,\n        onChangeText: setUserName\n      }), _jsx(TextInput, {\n        label: \"Password\",\n        value: password,\n        secureTextEntry: true,\n        onChangeText: setPassword\n      }), _jsx(Button, {\n        mode: \"contained\",\n        onPress: handleLogin,\n        style: {\n          marginTop: 20,\n          height: height\n        },\n        children: \"Login\"\n      })]\n    })\n  });\n};\nexport default Login;","map":{"version":3,"names":["React","useState","View","TextInput","Button","useExampleTheme","jsx","_jsx","jsxs","_jsxs","Login","theme","height","isV3","_useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","password","setPassword","handleLogin","console","log","style","flex","justifyContent","children","width","alignSelf","label","value","onChangeText","secureTextEntry","mode","onPress","marginTop"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View } from 'react-native';\r\nimport { TextInput, Button } from 'react-native-paper';\r\n\r\n// Utilizando hooks para el tema, asumiendo que es exportado desde './index'.\r\n// Este es solo un ejemplo; ajusta el uso del tema según sea necesario.\r\nimport { useExampleTheme } from './index';\r\n\r\nconst Login = () => {\r\nconst theme = useExampleTheme();\r\n// Asumiendo que isV3 es una propiedad del tema para determinar estilos\r\nconst height = theme.isV3 ? 80 : 56;\r\n\r\nconst [userName, setUserName] = useState('');\r\nconst [password, setPassword] = useState('');\r\n\r\nconst handleLogin = () => {\r\n    // Implementa aquí la lógica de inicio de sesión\r\n    console.log('Username:', userName);\r\n    console.log('Password:', password);\r\n};\r\n\r\nreturn (\r\n    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n    <View style={{ width: '80%', alignSelf: 'center' }}>\r\n        <TextInput\r\n        label=\"Email\"\r\n        value={userName}\r\n        onChangeText={setUserName} // Actualiza directamente el estado con el valor del input\r\n        />\r\n        <TextInput\r\n        label=\"Password\"\r\n        value={password}\r\n        secureTextEntry\r\n        onChangeText={setPassword} // Igual que arriba, actualiza directamente el estado\r\n        />\r\n        <Button mode=\"contained\" onPress={handleLogin} style={{ marginTop: 20, height }}>\r\n        Login\r\n        </Button>\r\n    </View>\r\n    </View>\r\n);\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAExC,SAASC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;AAItD,SAASC,eAAe;AAAkB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1C,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;EACpB,IAAMC,KAAK,GAAGN,eAAe,CAAC,CAAC;EAE/B,IAAMO,MAAM,GAAGD,KAAK,CAACE,IAAI,GAAG,EAAE,GAAG,EAAE;EAEnC,IAAAC,SAAA,GAAgCb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAAgClB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAEtBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAER,QAAQ,CAAC;IAClCO,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC;EACtC,CAAC;EAED,OACId,IAAA,CAACL,IAAI;IAACwB,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,cAAc,EAAE;IAAS,CAAE;IAAAC,QAAA,EACnDpB,KAAA,CAACP,IAAI;MAACwB,KAAK,EAAE;QAAEI,KAAK,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,GAC/CtB,IAAA,CAACJ,SAAS;QACV6B,KAAK,EAAC,OAAO;QACbC,KAAK,EAAEhB,QAAS;QAChBiB,YAAY,EAAEhB;MAAY,CACzB,CAAC,EACFX,IAAA,CAACJ,SAAS;QACV6B,KAAK,EAAC,UAAU;QAChBC,KAAK,EAAEZ,QAAS;QAChBc,eAAe;QACfD,YAAY,EAAEZ;MAAY,CACzB,CAAC,EACFf,IAAA,CAACH,MAAM;QAACgC,IAAI,EAAC,WAAW;QAACC,OAAO,EAAEd,WAAY;QAACG,KAAK,EAAE;UAAEY,SAAS,EAAE,EAAE;UAAE1B,MAAM,EAANA;QAAO,CAAE;QAAAiB,QAAA,EAAC;MAEjF,CAAQ,CAAC;IAAA,CACP;EAAC,CACD,CAAC;AAEX,CAAC;AAED,eAAenB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}