{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { ToggleButton, List } from 'react-native-paper';\nimport ScreenWrapper from \"../ScreenWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FontsEnum = function (FontsEnum) {\n  FontsEnum[\"NoFormat\"] = \"no-format\";\n  FontsEnum[\"Italic\"] = \"italic\";\n  FontsEnum[\"Bold\"] = \"bold\";\n  FontsEnum[\"Underline\"] = \"underlined\";\n  FontsEnum[\"ColorText\"] = \"format-color\";\n  return FontsEnum;\n}(FontsEnum || {});\nvar ToggleButtonExample = function ToggleButtonExample() {\n  var _React$useState = React.useState('bold'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    first = _React$useState2[0],\n    setFirst = _React$useState2[1];\n  var _React$useState3 = React.useState('watermelon'),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    fruit = _React$useState4[0],\n    setFruit = _React$useState4[1];\n  var _React$useState5 = React.useState('checked'),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    status = _React$useState6[0],\n    setStatus = _React$useState6[1];\n  var _React$useState7 = React.useState(FontsEnum.NoFormat),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    font = _React$useState8[0],\n    setFont = _React$useState8[1];\n  var handleFruit = function handleFruit(value) {\n    return setFruit(value);\n  };\n  return _jsxs(ScreenWrapper, {\n    children: [_jsx(List.Section, {\n      title: \"Single\",\n      children: _jsx(View, {\n        style: styles.padding,\n        children: _jsx(ToggleButton, {\n          icon: \"android\",\n          value: \"android\",\n          status: status,\n          onPress: function onPress() {\n            return setStatus(status === 'checked' ? 'unchecked' : 'checked');\n          }\n        })\n      })\n    }), _jsx(List.Section, {\n      title: \"Row\",\n      children: _jsxs(ToggleButton.Row, {\n        value: first,\n        onValueChange: function onValueChange(value) {\n          return setFirst(value);\n        },\n        style: styles.padding,\n        children: [_jsx(ToggleButton, {\n          disabled: true,\n          icon: \"format-italic\",\n          value: \"italic\"\n        }), _jsx(ToggleButton, {\n          icon: \"format-bold\",\n          value: \"bold\"\n        }), _jsx(ToggleButton, {\n          icon: \"format-underline\",\n          value: \"underlined\"\n        }), _jsx(ToggleButton, {\n          icon: \"format-color-text\",\n          value: \"format-color\"\n        })]\n      })\n    }), _jsx(List.Section, {\n      title: \"Group & enums\",\n      children: _jsx(View, {\n        style: styles.padding,\n        children: _jsxs(ToggleButton.Group, {\n          value: font,\n          onValueChange: setFont,\n          children: [_jsx(ToggleButton, {\n            disabled: true,\n            icon: \"format-italic\",\n            value: FontsEnum.Italic\n          }), _jsx(ToggleButton, {\n            icon: \"format-bold\",\n            value: FontsEnum.Bold\n          }), _jsx(ToggleButton, {\n            icon: \"format-underline\",\n            value: FontsEnum.Underline\n          }), _jsx(ToggleButton, {\n            icon: \"format-color-text\",\n            value: FontsEnum.ColorText\n          })]\n        })\n      })\n    }), _jsx(List.Section, {\n      title: \"Custom & union types\",\n      children: _jsx(View, {\n        style: [styles.padding, styles.row],\n        children: _jsxs(ToggleButton.Group, {\n          value: fruit,\n          onValueChange: handleFruit,\n          children: [_jsx(ImageBackground, {\n            style: styles.customImage,\n            source: {\n              uri: 'https://images.pexels.com/photos/5946081/pexels-photo-5946081.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2'\n            },\n            children: _jsx(ToggleButton, {\n              value: \"watermelon\",\n              size: 24,\n              style: styles.customButton,\n              iconColor: \"white\",\n              icon: fruit === 'watermelon' ? 'heart' : 'heart-outline'\n            })\n          }), _jsx(ImageBackground, {\n            style: styles.customImage,\n            source: {\n              uri: 'https://images.pexels.com/photos/46174/strawberries-berries-fruit-freshness-46174.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260'\n            },\n            children: _jsx(ToggleButton, {\n              value: \"strawberries\",\n              size: 24,\n              style: styles.customButton,\n              iconColor: \"white\",\n              icon: fruit === 'strawberries' ? 'heart' : 'heart-outline'\n            })\n          })]\n        })\n      })\n    })]\n  });\n};\nToggleButtonExample.title = 'Toggle Button';\nvar styles = StyleSheet.create({\n  padding: {\n    paddingHorizontal: 16\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  customImage: {\n    width: 143,\n    height: 153,\n    margin: 2\n  },\n  customButton: {\n    position: 'absolute',\n    right: 0\n  }\n});\nexport default ToggleButtonExample;","map":{"version":3,"names":["React","View","StyleSheet","ImageBackground","ToggleButton","List","ScreenWrapper","jsx","_jsx","jsxs","_jsxs","FontsEnum","ToggleButtonExample","_React$useState","useState","_React$useState2","_slicedToArray","first","setFirst","_React$useState3","_React$useState4","fruit","setFruit","_React$useState5","_React$useState6","status","setStatus","_React$useState7","NoFormat","_React$useState8","font","setFont","handleFruit","value","children","Section","title","style","styles","padding","icon","onPress","Row","onValueChange","disabled","Group","Italic","Bold","Underline","ColorText","row","customImage","source","uri","size","customButton","iconColor","create","paddingHorizontal","flexDirection","width","height","margin","position","right"],"sources":["C:/Users/kikoj/Desktop/DAM/Projecte/AppITICBCN/M13_PROJECTE2/APPITICBCN/src/Examples/ToggleButtonExample.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet, ImageBackground } from 'react-native';\r\n\r\nimport { ToggleButton, List } from 'react-native-paper';\r\n\r\nimport ScreenWrapper from '../ScreenWrapper';\r\n\r\ntype StatusState = 'checked' | 'unchecked';\r\ntype Fruits = 'watermelon' | 'strawberries';\r\n\r\nenum FontsEnum {\r\n  NoFormat = 'no-format',\r\n  Italic = 'italic',\r\n  Bold = 'bold',\r\n  Underline = 'underlined',\r\n  ColorText = 'format-color',\r\n}\r\n\r\nconst ToggleButtonExample = () => {\r\n  const [first, setFirst] = React.useState('bold');\r\n  const [fruit, setFruit] = React.useState<Fruits>('watermelon');\r\n  const [status, setStatus] = React.useState<StatusState>('checked');\r\n  const [font, setFont] = React.useState<FontsEnum>(FontsEnum.NoFormat);\r\n\r\n  const handleFruit = (value: Fruits) => setFruit(value);\r\n\r\n  return (\r\n    <ScreenWrapper>\r\n      <List.Section title=\"Single\">\r\n        <View style={styles.padding}>\r\n          <ToggleButton\r\n            icon=\"android\"\r\n            value=\"android\"\r\n            status={status}\r\n            onPress={() =>\r\n              setStatus(status === 'checked' ? 'unchecked' : 'checked')\r\n            }\r\n          />\r\n        </View>\r\n      </List.Section>\r\n      <List.Section title=\"Row\">\r\n        <ToggleButton.Row\r\n          value={first}\r\n          onValueChange={(value: string) => setFirst(value)}\r\n          style={styles.padding}\r\n        >\r\n          <ToggleButton disabled icon=\"format-italic\" value=\"italic\" />\r\n          <ToggleButton icon=\"format-bold\" value=\"bold\" />\r\n          <ToggleButton icon=\"format-underline\" value=\"underlined\" />\r\n          <ToggleButton icon=\"format-color-text\" value=\"format-color\" />\r\n        </ToggleButton.Row>\r\n      </List.Section>\r\n      <List.Section title=\"Group & enums\">\r\n        <View style={styles.padding}>\r\n          <ToggleButton.Group value={font} onValueChange={setFont}>\r\n            <ToggleButton\r\n              disabled\r\n              icon=\"format-italic\"\r\n              value={FontsEnum.Italic}\r\n            />\r\n            <ToggleButton icon=\"format-bold\" value={FontsEnum.Bold} />\r\n            <ToggleButton icon=\"format-underline\" value={FontsEnum.Underline} />\r\n            <ToggleButton\r\n              icon=\"format-color-text\"\r\n              value={FontsEnum.ColorText}\r\n            />\r\n          </ToggleButton.Group>\r\n        </View>\r\n      </List.Section>\r\n      <List.Section title=\"Custom & union types\">\r\n        <View style={[styles.padding, styles.row]}>\r\n          <ToggleButton.Group value={fruit} onValueChange={handleFruit}>\r\n            <ImageBackground\r\n              style={styles.customImage}\r\n              source={{\r\n                uri: 'https://images.pexels.com/photos/5946081/pexels-photo-5946081.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',\r\n              }}\r\n            >\r\n              <ToggleButton\r\n                value=\"watermelon\"\r\n                size={24}\r\n                style={styles.customButton}\r\n                iconColor=\"white\"\r\n                icon={fruit === 'watermelon' ? 'heart' : 'heart-outline'}\r\n              />\r\n            </ImageBackground>\r\n            <ImageBackground\r\n              style={styles.customImage}\r\n              source={{\r\n                uri: 'https://images.pexels.com/photos/46174/strawberries-berries-fruit-freshness-46174.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260',\r\n              }}\r\n            >\r\n              <ToggleButton\r\n                value=\"strawberries\"\r\n                size={24}\r\n                style={styles.customButton}\r\n                iconColor=\"white\"\r\n                icon={fruit === 'strawberries' ? 'heart' : 'heart-outline'}\r\n              />\r\n            </ImageBackground>\r\n          </ToggleButton.Group>\r\n        </View>\r\n      </List.Section>\r\n    </ScreenWrapper>\r\n  );\r\n};\r\n\r\nToggleButtonExample.title = 'Toggle Button';\r\n\r\nconst styles = StyleSheet.create({\r\n  padding: {\r\n    paddingHorizontal: 16,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n  },\r\n  customImage: {\r\n    width: 143,\r\n    height: 153,\r\n    margin: 2,\r\n  },\r\n  customButton: {\r\n    position: 'absolute',\r\n    right: 0,\r\n  },\r\n});\r\n\r\nexport default ToggleButtonExample;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}