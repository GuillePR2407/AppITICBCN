{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Card, IconButton, SegmentedButtons } from 'react-native-paper';\nimport { restaurantsData } from \"../../../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SegmentedButtonMultiselectRealCase = function SegmentedButtonMultiselectRealCase() {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    value = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var filteredData = React.useMemo(function () {\n    return restaurantsData.filter(function (item) {\n      return value.includes(item.price.toString());\n    });\n  }, [value]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(SegmentedButtons, {\n      value: value,\n      onValueChange: setValue,\n      multiSelect: true,\n      buttons: [{\n        value: '1',\n        label: '$',\n        style: styles.button,\n        showSelectedCheck: true\n      }, {\n        value: '2',\n        label: '$$',\n        style: styles.button,\n        showSelectedCheck: true\n      }, {\n        value: '3',\n        label: '$$$',\n        style: styles.button,\n        showSelectedCheck: true\n      }, {\n        value: '4',\n        label: '$$$$',\n        style: styles.button,\n        showSelectedCheck: true\n      }],\n      style: styles.group\n    }), _jsx(FlatList, {\n      data: value.length > 0 ? filteredData : restaurantsData,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(Card, {\n          mode: \"contained\",\n          style: styles.card,\n          children: _jsxs(Card.Content, {\n            style: styles.content,\n            children: [_jsx(Card.Cover, {\n              style: styles.cover,\n              source: item.cover,\n              resizeMode: \"contain\",\n              height: 72,\n              width: 72\n            }), _jsx(Card.Title, {\n              title: item.name,\n              subtitle: '$'.repeat(item.price),\n              titleVariant: \"titleMedium\",\n              style: styles.title,\n              right: function right() {\n                return _jsx(IconButton, {\n                  icon: 'bookmark-outline'\n                });\n              }\n            })]\n          })\n        });\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: 16\n  },\n  card: {\n    marginHorizontal: 16,\n    marginTop: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 0,\n    paddingVertical: 0\n  },\n  cover: {\n    width: 72,\n    height: 72\n  },\n  title: {\n    flexShrink: 1,\n    marginVertical: 0\n  },\n  button: {\n    flex: 1\n  },\n  group: {\n    paddingHorizontal: 20,\n    justifyContent: 'center'\n  }\n});\nSegmentedButtonMultiselectRealCase.title = 'Restaurants';\nexport default SegmentedButtonMultiselectRealCase;","map":{"version":3,"names":["React","FlatList","StyleSheet","View","Card","IconButton","SegmentedButtons","restaurantsData","jsx","_jsx","jsxs","_jsxs","SegmentedButtonMultiselectRealCase","_React$useState","useState","_React$useState2","_slicedToArray","value","setValue","filteredData","useMemo","filter","item","includes","price","toString","style","styles","container","children","onValueChange","multiSelect","buttons","label","button","showSelectedCheck","group","data","length","keyExtractor","id","renderItem","_ref","mode","card","Content","content","Cover","cover","source","resizeMode","height","width","Title","title","name","subtitle","repeat","titleVariant","right","icon","create","marginVertical","marginHorizontal","marginTop","flexDirection","alignItems","paddingHorizontal","paddingVertical","flexShrink","flex","justifyContent"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/Examples/SegmentedButtons/SegmentedButtonMultiselectRealCase.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { FlatList, StyleSheet, View } from 'react-native';\r\n\r\nimport { Card, IconButton, SegmentedButtons } from 'react-native-paper';\r\n\r\nimport { restaurantsData } from '../../../utils';\r\n\r\nconst SegmentedButtonMultiselectRealCase = () => {\r\n  const [value, setValue] = React.useState<string[]>([]);\r\n\r\n  const filteredData = React.useMemo(\r\n    () =>\r\n      restaurantsData.filter((item) => value.includes(item.price.toString())),\r\n    [value]\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <SegmentedButtons\r\n        value={value}\r\n        onValueChange={setValue}\r\n        multiSelect\r\n        buttons={[\r\n          {\r\n            value: '1',\r\n            label: '$',\r\n            style: styles.button,\r\n            showSelectedCheck: true,\r\n          },\r\n          {\r\n            value: '2',\r\n            label: '$$',\r\n            style: styles.button,\r\n            showSelectedCheck: true,\r\n          },\r\n          {\r\n            value: '3',\r\n            label: '$$$',\r\n            style: styles.button,\r\n            showSelectedCheck: true,\r\n          },\r\n          {\r\n            value: '4',\r\n            label: '$$$$',\r\n            style: styles.button,\r\n            showSelectedCheck: true,\r\n          },\r\n        ]}\r\n        style={styles.group}\r\n      />\r\n      <FlatList\r\n        data={value.length > 0 ? filteredData : restaurantsData}\r\n        keyExtractor={(item) => item.id}\r\n        renderItem={({ item }) => {\r\n          return (\r\n            <Card mode=\"contained\" style={styles.card}>\r\n              <Card.Content style={styles.content}>\r\n                <Card.Cover\r\n                  style={styles.cover}\r\n                  source={item.cover}\r\n                  resizeMode=\"contain\"\r\n                  height={72}\r\n                  width={72}\r\n                />\r\n                <Card.Title\r\n                  title={item.name}\r\n                  subtitle={'$'.repeat(item.price)}\r\n                  titleVariant=\"titleMedium\"\r\n                  style={styles.title}\r\n                  right={() => <IconButton icon={'bookmark-outline'} />}\r\n                />\r\n              </Card.Content>\r\n            </Card>\r\n          );\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginVertical: 16,\r\n  },\r\n  card: {\r\n    marginHorizontal: 16,\r\n    marginTop: 16,\r\n  },\r\n  content: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 0,\r\n    paddingVertical: 0,\r\n  },\r\n  cover: {\r\n    width: 72,\r\n    height: 72,\r\n  },\r\n  title: {\r\n    flexShrink: 1,\r\n    marginVertical: 0,\r\n  },\r\n  button: {\r\n    flex: 1,\r\n  },\r\n  group: { paddingHorizontal: 20, justifyContent: 'center' },\r\n});\r\n\r\nSegmentedButtonMultiselectRealCase.title = 'Restaurants';\r\n\r\nexport default SegmentedButtonMultiselectRealCase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}