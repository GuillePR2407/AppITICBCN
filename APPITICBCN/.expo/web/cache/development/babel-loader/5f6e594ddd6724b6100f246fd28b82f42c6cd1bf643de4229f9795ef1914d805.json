{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { Chip, List, MD2Colors, MD3Colors, Snackbar, Text } from 'react-native-paper';\nimport { useExampleTheme } from \"../index\";\nimport ScreenWrapper from \"../ScreenWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChipExample = function ChipExample() {\n  var _React$useState = React.useState({\n      visible: false,\n      text: ''\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    snackbarProperties = _React$useState2[0],\n    setSnackbarProperties = _React$useState2[1];\n  var _useExampleTheme = useExampleTheme(),\n    isV3 = _useExampleTheme.isV3;\n  var customColor = isV3 ? MD3Colors.error50 : MD2Colors.purple900;\n  return _jsxs(_Fragment, {\n    children: [_jsxs(ScreenWrapper, {\n      children: [_jsx(List.Section, {\n        title: \"Flat chip\",\n        children: _jsxs(View, {\n          style: styles.row,\n          children: [_jsx(Chip, {\n            selected: true,\n            onPress: function onPress() {},\n            style: styles.chip,\n            children: \"Simple\"\n          }), isV3 && _jsxs(_Fragment, {\n            children: [_jsx(Chip, {\n              selected: true,\n              showSelectedOverlay: true,\n              onPress: function onPress() {},\n              style: styles.chip,\n              children: \"With selected overlay\"\n            }), _jsx(Chip, {\n              elevated: true,\n              onPress: function onPress() {},\n              style: styles.chip,\n              children: \"Elevated\"\n            }), _jsx(Chip, {\n              compact: true,\n              style: styles.chip,\n              onPress: function onPress() {},\n              children: \"Compact chip\"\n            })]\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Close button pressed'\n              });\n            },\n            style: styles.chip,\n            closeIconAccessibilityLabel: \"Close icon accessibility label\",\n            children: \"Close button\"\n          }), _jsx(Chip, {\n            icon: \"heart\",\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Heart icon close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Icon\"\n          }), _jsx(Chip, {\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Avatar close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Avatar\"\n          }), _jsx(Chip, {\n            selected: true,\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            onPress: function onPress() {},\n            style: styles.chip,\n            children: \"Avatar (selected)\"\n          }), _jsx(Chip, {\n            disabled: true,\n            icon: \"heart\",\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Disabled heart icon close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Icon (disabled)\"\n          }), _jsx(Chip, {\n            disabled: true,\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            style: styles.chip,\n            children: \"Avatar (disabled)\"\n          })]\n        })\n      }), _jsx(List.Section, {\n        title: \"Outlined chip\",\n        children: _jsxs(View, {\n          style: styles.row,\n          children: [_jsx(Chip, {\n            mode: \"outlined\",\n            onPress: function onPress() {},\n            style: styles.chip,\n            children: \"Simple\"\n          }), isV3 && _jsxs(_Fragment, {\n            children: [_jsx(Chip, {\n              mode: \"outlined\",\n              selected: true,\n              showSelectedOverlay: true,\n              onPress: function onPress() {},\n              style: styles.chip,\n              children: \"With selected overlay\"\n            }), _jsx(Chip, {\n              mode: \"outlined\",\n              elevated: true,\n              onPress: function onPress() {},\n              style: styles.chip,\n              children: \"Elevated\"\n            }), _jsx(Chip, {\n              mode: \"outlined\",\n              compact: true,\n              onPress: function onPress() {},\n              style: styles.chip,\n              children: \"Compact chip\"\n            })]\n          }), _jsx(Chip, {\n            mode: \"outlined\",\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Close button\"\n          }), _jsx(Chip, {\n            mode: \"outlined\",\n            icon: \"heart\",\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Heart icon close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Icon\"\n          }), _jsx(Chip, {\n            mode: \"outlined\",\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            onPress: function onPress() {},\n            style: styles.chip,\n            children: \"Avatar\"\n          }), _jsx(Chip, {\n            selected: true,\n            mode: \"outlined\",\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            onPress: function onPress() {},\n            style: styles.chip,\n            children: \"Avatar (selected)\"\n          }), _jsx(Chip, {\n            disabled: true,\n            mode: \"outlined\",\n            icon: \"heart\",\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Disabled close button pressed'\n              });\n            },\n            style: styles.chip,\n            children: \"Icon (disabled)\"\n          }), _jsx(Chip, {\n            disabled: true,\n            mode: \"outlined\",\n            avatar: _jsx(Image, {\n              source: require(\"../../assets/images/avatar.png\"),\n              accessibilityIgnoresInvertColors: true\n            }),\n            style: styles.chip,\n            children: \"Avatar (disabled)\"\n          })]\n        })\n      }), _jsxs(List.Section, {\n        title: \"Custom chip\",\n        children: [_jsxs(View, {\n          style: styles.row,\n          children: [isV3 && _jsxs(_Fragment, {\n            children: [_jsx(Chip, {\n              mode: \"outlined\",\n              onPress: function onPress() {},\n              compact: true,\n              avatar: _jsx(Image, {\n                source: require(\"../../assets/images/avatar.png\"),\n                accessibilityIgnoresInvertColors: true\n              }),\n              style: [styles.chip, styles.customBorderRadius],\n              children: \"Compact with custom border radius\"\n            }), _jsx(Chip, {\n              mode: \"flat\",\n              onPress: function onPress() {},\n              compact: true,\n              avatar: _jsx(Image, {\n                source: require(\"../../assets/images/avatar.png\"),\n                accessibilityIgnoresInvertColors: true\n              }),\n              style: [styles.chip, styles.customBorderRadius],\n              children: \"Compact with custom border radius\"\n            })]\n          }), _jsx(Chip, {\n            mode: \"outlined\",\n            onPress: function onPress() {},\n            onLongPress: function onLongPress() {\n              return setSnackbarProperties({\n                visible: true,\n                text: ''\n              });\n            },\n            style: styles.chip,\n            children: \"With onLongPress\"\n          }), _jsx(Chip, {\n            selected: true,\n            onPress: function onPress() {},\n            style: [styles.chip, {\n              backgroundColor: color(customColor).alpha(0.2).rgb().string()\n            }],\n            selectedColor: customColor,\n            children: \"Flat selected chip with custom color\"\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            style: styles.chip,\n            selectedColor: customColor,\n            children: \"Flat unselected chip with custom color\"\n          }), _jsx(Chip, {\n            selected: true,\n            mode: \"outlined\",\n            onPress: function onPress() {},\n            style: [styles.chip, {\n              backgroundColor: color(customColor).alpha(0.2).rgb().string()\n            }],\n            selectedColor: customColor,\n            children: \"Outlined selected chip with custom color\"\n          }), _jsx(Chip, {\n            mode: \"outlined\",\n            onPress: function onPress() {},\n            style: styles.chip,\n            selectedColor: customColor,\n            children: \"Outlined unselected chip with custom color\"\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            style: styles.chip,\n            textStyle: styles.tiny,\n            children: \"With custom size\"\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Close button pressed'\n              });\n            },\n            style: styles.bigTextFlex,\n            textStyle: styles.bigTextStyle,\n            ellipsizeMode: \"middle\",\n            children: \"With a very big text: React Native Paper is a high-quality, standard-compliant Material Design library that has you covered in all major use-cases.\"\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            onClose: function onClose() {\n              return setSnackbarProperties({\n                visible: true,\n                text: 'Custom icon close button pressed'\n              });\n            },\n            closeIcon: \"arrow-down\",\n            style: styles.chip,\n            closeIconAccessibilityLabel: \"Custom Close icon accessibility label\",\n            children: \"With custom close icon\"\n          }), _jsx(Chip, {\n            onPress: function onPress() {},\n            style: styles.chip,\n            textStyle: styles.tiny,\n            children: _jsx(Text, {\n              variant: \"titleLarge\",\n              children: \"With custom text\"\n            })\n          })]\n        }), _jsx(Chip, {\n          mode: \"outlined\",\n          onPress: function onPress() {},\n          style: styles.fullWidthChip,\n          children: \"Full width chip\"\n        })]\n      })]\n    }), _jsx(Snackbar, {\n      visible: snackbarProperties.visible,\n      onDismiss: function onDismiss() {\n        return setSnackbarProperties({\n          visible: false,\n          text: ''\n        });\n      },\n      duration: Snackbar.DURATION_SHORT,\n      children: snackbarProperties.text\n    })]\n  });\n};\nChipExample.title = 'Chip';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 12\n  },\n  chip: {\n    margin: 4\n  },\n  tiny: {\n    marginVertical: 2,\n    marginRight: 2,\n    marginLeft: 2,\n    minHeight: 19,\n    lineHeight: 19\n  },\n  bigTextFlex: {\n    flex: 1\n  },\n  bigTextStyle: {\n    flex: -1\n  },\n  fullWidthChip: {\n    marginVertical: 4,\n    marginHorizontal: 12\n  },\n  customBorderRadius: {\n    borderRadius: 16\n  }\n});\nexport default ChipExample;","map":{"version":3,"names":["React","Image","StyleSheet","View","color","Chip","List","MD2Colors","MD3Colors","Snackbar","Text","useExampleTheme","ScreenWrapper","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ChipExample","_React$useState","useState","visible","text","_React$useState2","_slicedToArray","snackbarProperties","setSnackbarProperties","_useExampleTheme","isV3","customColor","error50","purple900","children","Section","title","style","styles","row","selected","onPress","chip","showSelectedOverlay","elevated","compact","onClose","closeIconAccessibilityLabel","icon","avatar","source","require","accessibilityIgnoresInvertColors","disabled","mode","customBorderRadius","onLongPress","backgroundColor","alpha","rgb","string","selectedColor","textStyle","tiny","bigTextFlex","bigTextStyle","ellipsizeMode","closeIcon","variant","fullWidthChip","onDismiss","duration","DURATION_SHORT","create","flexDirection","flexWrap","paddingHorizontal","margin","marginVertical","marginRight","marginLeft","minHeight","lineHeight","flex","marginHorizontal","borderRadius"],"sources":["C:/Users/Guille/Desktop/M13_PROJECTE2/APPITICBCN/src/Examples/ChipExample.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Image, StyleSheet, View } from 'react-native';\r\n\r\nimport color from 'color';\r\nimport {\r\n  Chip,\r\n  List,\r\n  MD2Colors,\r\n  MD3Colors,\r\n  Snackbar,\r\n  Text,\r\n} from 'react-native-paper';\r\n\r\nimport { useExampleTheme } from '../index';\r\nimport ScreenWrapper from '../ScreenWrapper';\r\n\r\nconst ChipExample = () => {\r\n  const [snackbarProperties, setSnackbarProperties] = React.useState({\r\n    visible: false,\r\n    text: '',\r\n  });\r\n  const { isV3 } = useExampleTheme();\r\n  const customColor = isV3 ? MD3Colors.error50 : MD2Colors.purple900;\r\n\r\n  return (\r\n    <>\r\n      <ScreenWrapper>\r\n        <List.Section title=\"Flat chip\">\r\n          <View style={styles.row}>\r\n            <Chip selected onPress={() => {}} style={styles.chip}>\r\n              Simple\r\n            </Chip>\r\n            {isV3 && (\r\n              <>\r\n                <Chip\r\n                  selected\r\n                  showSelectedOverlay\r\n                  onPress={() => {}}\r\n                  style={styles.chip}\r\n                >\r\n                  With selected overlay\r\n                </Chip>\r\n                <Chip elevated onPress={() => {}} style={styles.chip}>\r\n                  Elevated\r\n                </Chip>\r\n                <Chip compact style={styles.chip} onPress={() => {}}>\r\n                  Compact chip\r\n                </Chip>\r\n              </>\r\n            )}\r\n            <Chip\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n              closeIconAccessibilityLabel=\"Close icon accessibility label\"\r\n            >\r\n              Close button\r\n            </Chip>\r\n            <Chip\r\n              icon=\"heart\"\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Heart icon close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Icon\r\n            </Chip>\r\n            <Chip\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Avatar close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Avatar\r\n            </Chip>\r\n            <Chip\r\n              selected\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n            >\r\n              Avatar (selected)\r\n            </Chip>\r\n            <Chip\r\n              disabled\r\n              icon=\"heart\"\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Disabled heart icon close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Icon (disabled)\r\n            </Chip>\r\n            <Chip\r\n              disabled\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Avatar (disabled)\r\n            </Chip>\r\n          </View>\r\n        </List.Section>\r\n        <List.Section title=\"Outlined chip\">\r\n          <View style={styles.row}>\r\n            <Chip mode=\"outlined\" onPress={() => {}} style={styles.chip}>\r\n              Simple\r\n            </Chip>\r\n            {isV3 && (\r\n              <>\r\n                <Chip\r\n                  mode=\"outlined\"\r\n                  selected\r\n                  showSelectedOverlay\r\n                  onPress={() => {}}\r\n                  style={styles.chip}\r\n                >\r\n                  With selected overlay\r\n                </Chip>\r\n                <Chip\r\n                  mode=\"outlined\"\r\n                  elevated\r\n                  onPress={() => {}}\r\n                  style={styles.chip}\r\n                >\r\n                  Elevated\r\n                </Chip>\r\n                <Chip\r\n                  mode=\"outlined\"\r\n                  compact\r\n                  onPress={() => {}}\r\n                  style={styles.chip}\r\n                >\r\n                  Compact chip\r\n                </Chip>\r\n              </>\r\n            )}\r\n            <Chip\r\n              mode=\"outlined\"\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Close button\r\n            </Chip>\r\n            <Chip\r\n              mode=\"outlined\"\r\n              icon=\"heart\"\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Heart icon close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Icon\r\n            </Chip>\r\n            <Chip\r\n              mode=\"outlined\"\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n            >\r\n              Avatar\r\n            </Chip>\r\n            <Chip\r\n              selected\r\n              mode=\"outlined\"\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n            >\r\n              Avatar (selected)\r\n            </Chip>\r\n            <Chip\r\n              disabled\r\n              mode=\"outlined\"\r\n              icon=\"heart\"\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Disabled close button pressed',\r\n                })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Icon (disabled)\r\n            </Chip>\r\n            <Chip\r\n              disabled\r\n              mode=\"outlined\"\r\n              avatar={\r\n                <Image\r\n                  source={require('../../assets/images/avatar.png')}\r\n                  accessibilityIgnoresInvertColors\r\n                />\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              Avatar (disabled)\r\n            </Chip>\r\n          </View>\r\n        </List.Section>\r\n        <List.Section title=\"Custom chip\">\r\n          <View style={styles.row}>\r\n            {isV3 && (\r\n              <>\r\n                <Chip\r\n                  mode=\"outlined\"\r\n                  onPress={() => {}}\r\n                  compact\r\n                  avatar={\r\n                    <Image\r\n                      source={require('../../assets/images/avatar.png')}\r\n                      accessibilityIgnoresInvertColors\r\n                    />\r\n                  }\r\n                  style={[styles.chip, styles.customBorderRadius]}\r\n                >\r\n                  Compact with custom border radius\r\n                </Chip>\r\n                <Chip\r\n                  mode=\"flat\"\r\n                  onPress={() => {}}\r\n                  compact\r\n                  avatar={\r\n                    <Image\r\n                      source={require('../../assets/images/avatar.png')}\r\n                      accessibilityIgnoresInvertColors\r\n                    />\r\n                  }\r\n                  style={[styles.chip, styles.customBorderRadius]}\r\n                >\r\n                  Compact with custom border radius\r\n                </Chip>\r\n              </>\r\n            )}\r\n            <Chip\r\n              mode=\"outlined\"\r\n              onPress={() => {}}\r\n              onLongPress={() =>\r\n                setSnackbarProperties({ visible: true, text: '' })\r\n              }\r\n              style={styles.chip}\r\n            >\r\n              With onLongPress\r\n            </Chip>\r\n            <Chip\r\n              selected\r\n              onPress={() => {}}\r\n              style={[\r\n                styles.chip,\r\n                {\r\n                  backgroundColor: color(customColor).alpha(0.2).rgb().string(),\r\n                },\r\n              ]}\r\n              selectedColor={customColor}\r\n            >\r\n              Flat selected chip with custom color\r\n            </Chip>\r\n            <Chip\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n              selectedColor={customColor}\r\n            >\r\n              Flat unselected chip with custom color\r\n            </Chip>\r\n            <Chip\r\n              selected\r\n              mode=\"outlined\"\r\n              onPress={() => {}}\r\n              style={[\r\n                styles.chip,\r\n                {\r\n                  backgroundColor: color(customColor).alpha(0.2).rgb().string(),\r\n                },\r\n              ]}\r\n              selectedColor={customColor}\r\n            >\r\n              Outlined selected chip with custom color\r\n            </Chip>\r\n            <Chip\r\n              mode=\"outlined\"\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n              selectedColor={customColor}\r\n            >\r\n              Outlined unselected chip with custom color\r\n            </Chip>\r\n            <Chip\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n              textStyle={styles.tiny}\r\n            >\r\n              With custom size\r\n            </Chip>\r\n            <Chip\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Close button pressed',\r\n                })\r\n              }\r\n              style={styles.bigTextFlex}\r\n              textStyle={styles.bigTextStyle}\r\n              ellipsizeMode=\"middle\"\r\n            >\r\n              With a very big text: React Native Paper is a high-quality,\r\n              standard-compliant Material Design library that has you covered in\r\n              all major use-cases.\r\n            </Chip>\r\n            <Chip\r\n              onPress={() => {}}\r\n              onClose={() =>\r\n                setSnackbarProperties({\r\n                  visible: true,\r\n                  text: 'Custom icon close button pressed',\r\n                })\r\n              }\r\n              closeIcon=\"arrow-down\"\r\n              style={styles.chip}\r\n              closeIconAccessibilityLabel=\"Custom Close icon accessibility label\"\r\n            >\r\n              With custom close icon\r\n            </Chip>\r\n            <Chip\r\n              onPress={() => {}}\r\n              style={styles.chip}\r\n              textStyle={styles.tiny}\r\n            >\r\n              <Text variant=\"titleLarge\">With custom text</Text>\r\n            </Chip>\r\n          </View>\r\n          <Chip mode=\"outlined\" onPress={() => {}} style={styles.fullWidthChip}>\r\n            Full width chip\r\n          </Chip>\r\n        </List.Section>\r\n      </ScreenWrapper>\r\n      <Snackbar\r\n        visible={snackbarProperties.visible}\r\n        onDismiss={() => setSnackbarProperties({ visible: false, text: '' })}\r\n        duration={Snackbar.DURATION_SHORT}\r\n      >\r\n        {snackbarProperties.text}\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n\r\nChipExample.title = 'Chip';\r\n\r\nconst styles = StyleSheet.create({\r\n  row: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    paddingHorizontal: 12,\r\n  },\r\n  chip: {\r\n    margin: 4,\r\n  },\r\n  tiny: {\r\n    marginVertical: 2,\r\n    marginRight: 2,\r\n    marginLeft: 2,\r\n    minHeight: 19,\r\n    lineHeight: 19,\r\n  },\r\n  bigTextFlex: {\r\n    flex: 1,\r\n  },\r\n  bigTextStyle: {\r\n    flex: -1,\r\n  },\r\n  fullWidthChip: {\r\n    marginVertical: 4,\r\n    marginHorizontal: 12,\r\n  },\r\n  customBorderRadius: {\r\n    borderRadius: 16,\r\n  },\r\n});\r\n\r\nexport default ChipExample;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}